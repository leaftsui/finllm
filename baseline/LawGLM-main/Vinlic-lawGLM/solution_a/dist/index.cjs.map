{"version":3,"sources":["../src/index.ts","../src/lib/logger.ts","../src/lib/config.ts","../src/lib/initialize.ts","../src/lib/server.ts","../src/lib/exceptions/Exception.ts","../src/lib/request/Request.ts","../src/lib/exceptions/APIException.ts","../src/api/consts/exceptions.ts","../src/lib/util.ts","../src/lib/http-status-codes.ts","../src/lib/response/Response.ts","../src/lib/response/Body.ts","../src/lib/response/FailureBody.ts","../src/lib/consts/exceptions.ts","../src/lib/question.ts","../src/lib/api.ts","../src/lib/tools.ts","../src/lib/llm.ts","../src/api/routes/index.ts","../src/api/controllers/question.ts","../src/api/routes/question.ts"],"sourcesContent":["import minimist from 'minimist';\n\nimport \"@/lib/initialize.ts\";\nimport server from \"@/lib/server.ts\";\nimport question from '@/lib/question.ts';\nimport routes from '@/api/routes/index.ts';\nimport logger from '@/lib/logger.ts';\n\n// 获取命令行参数\nconst cmdArgs = minimist(process.argv.slice(2));\nconst startupTime = performance.now();\n\n(async () => {\n    const param = cmdArgs.q;\n    if(param) {\n        if(param.trim() == 'all')\n            await question.generateQuestionsAnswer();\n        else\n            await question.generateQuestionAnswer(param);\n        process.exit(0);\n    }\n    \n    logger.header();\n\n    logger.info(\"<<<< law qa server >>>>\");\n    logger.info(\"Process id:\", process.pid);\n\n    server.attachRoutes(routes);\n    await server.listen();\n    \n})()\n    .then(() =>\n        logger.success(\n        `Service startup completed (${Math.floor(performance.now() - startupTime)}ms)`\n        )\n    )\n    .catch(err => logger.error(err));","import path from 'path';\nimport _util from 'util';\n\nimport 'colors';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport { format as dateFormat } from 'date-fns';\n\nimport config from './config.ts';\n\nconst isVercelEnv = process.env.VERCEL;\n\nclass LogWriter {\n\n    #buffers = [];\n\n    constructor() {\n        !isVercelEnv && fs.ensureDirSync('logs');\n        !isVercelEnv && this.work();\n    }\n\n    push(content) {\n        const buffer = Buffer.from(content);\n        this.#buffers.push(buffer);\n    }\n\n    writeSync(buffer) {\n        !isVercelEnv && fs.appendFileSync(path.join('logs', `/${this.getDateString()}.log`), buffer);\n    }\n\n    async write(buffer) {\n        !isVercelEnv && await fs.appendFile(path.join('logs', `/${this.getDateString()}.log`), buffer);\n    }\n\n    flush() {\n        if(!this.#buffers.length) return;\n        !isVercelEnv && fs.appendFileSync(path.join('logs', `/${this.getDateString()}.log`), Buffer.concat(this.#buffers));\n    }\n\n    work() {\n        if (!this.#buffers.length) return setTimeout(this.work.bind(this), 300);\n        const buffer = Buffer.concat(this.#buffers);\n        this.#buffers = [];\n        this.write(buffer)\n        .finally(() => setTimeout(this.work.bind(this), 300))\n        .catch(err => console.error(\"Log write error:\", err));\n    }\n\n    getDateString(format = \"yyyy-MM-dd\", date = new Date()) {\n        return dateFormat(date, format);\n    }\n\n}\n\nclass LogText {\n\n    /** @type {string} 日志级别 */\n    level;\n    /** @type {string} 日志文本 */\n    text;\n    /** @type {string} 日志来源 */\n    source;\n    /** @type {Date} 日志发生时间 */\n    time = new Date();\n\n    constructor(level, ...params) {\n        this.level = level;\n        this.text = _util.format.apply(null, params);\n        this.source = this.#getStackTopCodeInfo();\n    }\n\n    #getStackTopCodeInfo() {\n        const unknownInfo = { name: \"unknown\", codeLine: 0, codeColumn: 0 };\n        const stackArray = new Error().stack.split(\"\\n\");\n        const text = stackArray[4];\n        if (!text)\n            return unknownInfo;\n        const match = text.match(/at (.+) \\((.+)\\)/) || text.match(/at (.+)/);\n        if (!match || !_.isString(match[2] || match[1]))\n            return unknownInfo;\n        const temp = match[2] || match[1];\n        const _match = temp.match(/([a-zA-Z0-9_\\-\\.]+)\\:(\\d+)\\:(\\d+)$/);\n        if (!_match)\n            return unknownInfo;\n        const [, scriptPath, codeLine, codeColumn] = _match as any;\n        return {\n            name: scriptPath ? scriptPath.replace(/.js$/, \"\") : \"unknown\",\n            path: scriptPath || null,\n            codeLine: parseInt(codeLine || 0),\n            codeColumn: parseInt(codeColumn || 0)\n        };\n    }\n\n    toString() {\n        return `[${dateFormat(this.time, \"yyyy-MM-dd HH:mm:ss.SSS\")}][${this.level}][${this.source.name}<${this.source.codeLine},${this.source.codeColumn}>] ${this.text}`;\n    }\n\n}\n\nclass Logger {\n\n    /** @type {Object} 系统配置 */\n    config = {};\n    /** @type {Object} 日志级别映射 */\n    static Level = {\n        Success: \"success\",\n        Info: \"info\",\n        Log: \"log\",\n        Debug: \"debug\",\n        Warning: \"warning\",\n        Error: \"error\",\n        Fatal: \"fatal\"\n    };\n    /** @type {Object} 日志级别文本颜色樱色 */\n    static LevelColor = {\n        [Logger.Level.Success]: \"green\",\n        [Logger.Level.Info]: \"brightCyan\",\n        [Logger.Level.Debug]: \"white\",\n        [Logger.Level.Warning]: \"brightYellow\",\n        [Logger.Level.Error]: \"brightRed\",\n        [Logger.Level.Fatal]: \"red\"\n    };\n    #writer;\n\n    constructor() {\n        this.#writer = new LogWriter();\n    }\n\n    header() {\n        this.#writer.writeSync(Buffer.from(`\\n\\n===================== LOG START ${dateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss.SSS\")} =====================\\n\\n`));\n    }\n\n    footer() {\n        this.#writer.flush();  //将未写入文件的日志缓存写入\n        this.#writer.writeSync(Buffer.from(`\\n\\n===================== LOG END ${dateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss.SSS\")} =====================\\n\\n`));\n    }\n\n    success(...params) {\n        const content = new LogText(Logger.Level.Success, ...params).toString();\n        console.info('✅ ' + content[Logger.LevelColor[Logger.Level.Success]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    info(...params) {\n        const content = new LogText(Logger.Level.Info, ...params).toString();\n        console.info('🌏 ' + content[Logger.LevelColor[Logger.Level.Info]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    log(...params) {\n        const content = new LogText(Logger.Level.Log, ...params).toString();\n        console.log(content[Logger.LevelColor[Logger.Level.Log]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    debug(...params) {\n        if(!config.service.debug) return;  //非调试模式忽略debug\n        const content = new LogText(Logger.Level.Debug, ...params).toString();\n        console.debug(content[Logger.LevelColor[Logger.Level.Debug]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    warn(...params) {\n        const content = new LogText(Logger.Level.Warning, ...params).toString();\n        console.warn('❗ ' + content[Logger.LevelColor[Logger.Level.Warning]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    error(...params) {\n        const content = new LogText(Logger.Level.Error, ...params).toString();\n        console.error('❌ ' + content[Logger.LevelColor[Logger.Level.Error]]);\n        this.#writer.push(content);\n    }\n\n    fatal(...params) {\n        const content = new LogText(Logger.Level.Fatal, ...params).toString();\n        console.error(content[Logger.LevelColor[Logger.Level.Fatal]]);\n        this.#writer.push(content);\n    }\n\n    destory() {\n        this.#writer.destory();\n    }\n\n}\n\nexport default new Logger();","\nimport fs from 'fs-extra';\nimport yaml from 'yaml';\n\nif(!fs.pathExistsSync('config.yml'))\n    throw new Error('config.yml not found');\n\nexport default yaml.parse(fs.readFileSync('config.yml').toString()) || {};","import logger from './logger.js';\n\n// 允许无限量的监听器\nprocess.setMaxListeners(Infinity);\n// 输出未捕获异常\nprocess.on(\"uncaughtException\", (err, origin) => {\n    logger.error(`An unhandled error occurred: ${origin}`, err);\n});\n// 输出未处理的Promise.reject\nprocess.on(\"unhandledRejection\", (_, promise) => {\n    promise.catch(err => logger.error(\"An unhandled rejection occurred:\", err));\n});\n// 输出系统警告信息\nprocess.on(\"warning\", warning => logger.warn(\"System warning: \", warning));\n// 进程退出监听\nprocess.on(\"exit\", () => {\n    logger.info(\"Service exit\");\n    logger.footer();\n});\n// 进程被kill\nprocess.on(\"SIGTERM\", () => {\n    logger.warn(\"received kill signal\");\n    process.exit(2);\n});\n// Ctrl-C进程退出\nprocess.on(\"SIGINT\", () => {\n    process.exit(0);\n});","import Koa from 'koa';\nimport KoaRouter from 'koa-router';\nimport koaRange from 'koa-range';\nimport koaCors from \"koa2-cors\";\nimport koaBody from 'koa-body';\nimport _ from 'lodash';\n\nimport Exception from './exceptions/Exception.ts';\nimport Request from './request/Request.ts';\nimport Response from './response/Response.js';\nimport FailureBody from './response/FailureBody.ts';\nimport EX from './consts/exceptions.ts';\nimport logger from './logger.ts';\nimport config from './config.ts';\n\nclass Server {\n\n    app;\n    router;\n    \n    constructor() {\n        this.app = new Koa();\n        this.app.use(koaCors());\n        // 范围请求支持\n        this.app.use(koaRange);\n        this.router = new KoaRouter({ prefix: config.service.urlPrefix });\n        // 前置处理异常拦截\n        this.app.use(async (ctx: any, next: Function) => {\n            if(ctx.request.type === \"application/xml\" || ctx.request.type === \"application/ssml+xml\")\n                ctx.req.headers[\"content-type\"] = \"text/xml\";\n            try { await next() }\n            catch (err) {\n                logger.error(err);\n                const failureBody = new FailureBody(err);\n                new Response(failureBody).injectTo(ctx);\n            }\n        });\n        // 载荷解析器支持\n        this.app.use(koaBody({\n            enableTypes: ['json', 'form', 'text', 'xml'],\n            encoding: 'utf-8',\n            formLimit: '100mb',\n            jsonLimit: '100mb',\n            textLimit: '100mb',\n            xmlLimit: '100mb',\n            formidable: {\n                maxFileSize: '100mb'\n            },\n            multipart: true,\n            parsedMethods: ['POST', 'PUT', 'PATCH']\n        } as any));\n        this.app.on(\"error\", (err: any) => {\n            // 忽略连接重试、中断、管道、取消错误\n            if ([\"ECONNRESET\", \"ECONNABORTED\", \"EPIPE\", \"ECANCELED\"].includes(err.code)) return;\n            logger.error(err);\n        });\n        logger.success(\"Server initialized\");\n    }\n\n    /**\n     * 附加路由\n     * \n     * @param routes 路由列表\n     */\n    attachRoutes(routes: any[]) {\n        routes.forEach((route: any) => {\n            const prefix = route.prefix || \"\";\n            for (let method in route) {\n                if(method === \"prefix\") continue;\n                if (!_.isObject(route[method])) {\n                    logger.warn(`Router ${prefix} ${method} invalid`);\n                    continue;\n                }\n                for (let uri in route[method]) {\n                    this.router[method](`${prefix}${uri}`, async ctx => {\n                        const { request, response } = await this.#requestProcessing(ctx, route[method][uri]);\n                        if(response != null && config.service.requestLog)\n                            logger.info(`<- ${request.method} ${request.url} ${response.time - request.time}ms`);\n                    });\n                }\n            }\n            logger.info(`Route ${config.service.urlPrefix || \"\"}${prefix} attached`);\n        });\n        this.app.use(this.router.routes());\n        this.app.use((ctx: any) => {\n            const request = new Request(ctx);\n            logger.debug(`-> ${ctx.request.method} ${ctx.request.url} request is not supported - ${request.remoteIP || \"unknown\"}`);\n            const failureBody = new FailureBody(new Exception(EX.SYSTEM_NOT_ROUTE_MATCHING, \"Request is not supported\"));\n            const response = new Response(failureBody);\n            response.injectTo(ctx);\n            if(config.service.requestLog)\n                logger.info(`<- ${request.method} ${request.url} ${response.time - request.time}ms`);\n        });\n    }\n\n    /**\n     * 请求处理\n     * \n     * @param ctx 上下文\n     * @param routeFn 路由方法\n     */\n    #requestProcessing(ctx: any, routeFn: Function): Promise<any> {\n        return new Promise(resolve => {\n            const request = new Request(ctx);\n            try {\n                if(config.service.requestLog)\n                    logger.info(`-> ${request.method} ${request.url}`);\n                    routeFn(request)\n                .then(response => {\n                    try {\n                        if(!Response.isInstance(response)) {\n                            const _response = new Response(response);\n                            _response.injectTo(ctx);\n                            return resolve({ request, response: _response });\n                        }\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                    catch(err) {\n                        logger.error(err);\n                        const failureBody = new FailureBody(err);\n                        const response = new Response(failureBody);\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                })\n                .catch(err => {\n                    try {\n                        logger.error(err);\n                        const failureBody = new FailureBody(err);\n                        const response = new Response(failureBody);\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                    catch(err) {\n                        logger.error(err);\n                        const failureBody = new FailureBody(err);\n                        const response = new Response(failureBody);\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                });\n            }\n            catch(err) {\n                logger.error(err);\n                const failureBody = new FailureBody(err);\n                const response = new Response(failureBody);\n                response.injectTo(ctx);\n                resolve({ request, response });\n            }\n        });\n    }\n\n    /**\n     * 监听端口\n     */\n    async listen() {\n        const host = config.service.host;\n        const port = config.service.port;\n        await Promise.all([\n            new Promise((resolve, reject) => {\n                if(host === \"0.0.0.0\" || host === \"localhost\" || host === \"127.0.0.1\")\n                    return resolve(null);\n                this.app.listen(port, \"localhost\", err => {\n                    if(err) return reject(err);\n                    resolve(null);\n                });\n            }),\n            new Promise((resolve, reject) => {\n                this.app.listen(port, host, err => {\n                    if(err) return reject(err);\n                    resolve(null);\n                });\n            })\n        ]);\n        logger.success(`Server listening on port ${port} (${host})`);\n    }\n\n}\n\nexport default new Server();","import assert from 'assert';\n\nimport _ from 'lodash';\n\nexport default class Exception extends Error {\n\n    /** 错误码 */\n    errcode: number;\n    /** 错误消息 */\n    errmsg: string;\n    /** 数据 */\n    data: any;\n    /** HTTP状态码 */\n    httpStatusCode: number;\n\n    /**\n     * 构造异常\n     * \n     * @param exception 异常\n     * @param _errmsg 异常消息\n     */\n    constructor(exception: (string | number)[], _errmsg?: string) {\n        assert(_.isArray(exception), 'Exception must be Array');\n        const [errcode, errmsg] = exception as [number, string];\n        assert(_.isFinite(errcode), 'Exception errcode invalid');\n        assert(_.isString(errmsg), 'Exception errmsg invalid');\n        super(_errmsg || errmsg);\n        this.errcode = errcode;\n        this.errmsg = _errmsg || errmsg;\n    }\n\n    compare(exception: (string | number)[]) {\n        const [errcode] = exception as [number, string];\n        return this.errcode == errcode;\n    }\n\n    setHTTPStatusCode(value: number) {\n        this.httpStatusCode = value;\n        return this;\n    }\n\n    setData(value: any) {\n        this.data = _.defaultTo(value, null);\n        return this;\n    }\n\n}","import _ from 'lodash';\n\nimport APIException from '@/lib/exceptions/APIException.ts';\nimport EX from '@/api/consts/exceptions.ts';\nimport logger from '@/lib/logger.ts';\nimport util from '@/lib/util.ts';\n\nexport interface RequestOptions {\n    time?: number;\n}\n\nexport default class Request {\n\n    /** 请求方法 */\n    method: string;\n    /** 请求URL */\n    url: string;\n    /** 请求路径 */\n    path: string;\n    /** 请求载荷类型 */\n    type: string;\n    /** 请求headers */\n    headers: any;\n    /** 请求原始查询字符串 */\n    search: string;\n    /** 请求查询参数 */\n    query: any;\n    /** 请求URL参数 */\n    params: any;\n    /** 请求载荷 */\n    body: any;\n    /** 上传的文件 */\n    files: any[];\n    /** 客户端IP地址 */\n    remoteIP: string | null;\n    /** 请求接受时间戳（毫秒） */\n    time: number;\n\n    constructor(ctx, options: RequestOptions = {}) {\n        const { time } = options;\n        this.method = ctx.request.method;\n        this.url = ctx.request.url;\n        this.path = ctx.request.path;\n        this.type = ctx.request.type;\n        this.headers = ctx.request.headers || {};\n        this.search = ctx.request.search;\n        this.query = ctx.query || {};\n        this.params = ctx.params || {};\n        this.body = ctx.request.body || {};\n        this.files = ctx.request.files || {};\n        this.remoteIP = this.headers[\"X-Real-IP\"] || this.headers[\"x-real-ip\"] || this.headers[\"X-Forwarded-For\"] || this.headers[\"x-forwarded-for\"] || ctx.ip || null;\n        this.time = Number(_.defaultTo(time, util.timestamp()));\n    }\n\n    validate(key: string, fn?: Function, errorMessage?: string) {\n        try {\n            const value = _.get(this, key);\n            if (fn) {\n                if (fn(value) === false)\n                    throw `[Mismatch] -> ${fn}`;\n            }\n            else if (_.isUndefined(value))\n                throw '[Undefined]';\n        }\n        catch (err) {\n            logger.warn(`Params ${key} invalid:`, err);\n            throw new APIException(EX.API_REQUEST_PARAMS_INVALID, errorMessage || `Params ${key} invalid`);\n        }\n        return this;\n    }\n\n}","import Exception from './Exception.js';\n\nexport default class APIException extends Exception {\n\n    /**\n     * 构造异常\n     * \n     * @param {[number, string]} exception 异常\n     */\n    constructor(exception: (string | number)[], errmsg?: string) {\n        super(exception, errmsg);\n    }\n\n}","export default {\n    API_TEST: [-9999, 'API异常错误'],\n    API_REQUEST_PARAMS_INVALID: [-2000, '请求参数非法'],\n    API_REQUEST_FAILED: [-2001, '请求失败'],\n    API_TOKEN_EXPIRES: [-2002, 'Token已失效'],\n    API_FILE_URL_INVALID: [-2003, '远程文件URL非法'],\n    API_FILE_EXECEEDS_SIZE: [-2004, '远程文件超出大小'],\n    API_CHAT_STREAM_PUSHING: [-2005, '已有对话流正在输出'],\n    API_CONTENT_FILTERED: [-2006, '内容由于合规问题已被阻止生成'],\n    API_IMAGE_GENERATION_FAILED: [-2007, '图像生成失败']\n}","import os from \"os\";\nimport path from \"path\";\nimport crypto from \"crypto\";\nimport { Readable, Writable } from \"stream\";\n\nimport \"colors\";\nimport mime from \"mime\";\nimport axios from \"axios\";\nimport fs from \"fs-extra\";\nimport { v1 as uuid } from \"uuid\";\nimport { format as dateFormat } from \"date-fns\";\nimport randomstring from \"randomstring\";\nimport _ from \"lodash\";\n\nimport HTTP_STATUS_CODE from \"./http-status-codes.ts\";\n\nconst autoIdMap = new Map();\n\nconst util = {\n  is2DArrays(value: any) {\n    return (\n      _.isArray(value) &&\n      (!value[0] || (_.isArray(value[0]) && _.isArray(value[value.length - 1])))\n    );\n  },\n\n  uuid: (separator = true) => (separator ? uuid() : uuid().replace(/\\-/g, \"\")),\n\n  autoId: (prefix = \"\") => {\n    let index = autoIdMap.get(prefix);\n    if (index > 999999) index = 0; //超过最大数字则重置为0\n    autoIdMap.set(prefix, (index || 0) + 1);\n    return `${prefix}${index || 1}`;\n  },\n\n  ignoreJSONParse(value: string) {\n    const result = _.attempt(() => JSON.parse(value));\n    if (_.isError(result)) return null;\n    return result;\n  },\n\n  generateRandomString(options: any): string {\n    return randomstring.generate(options);\n  },\n\n  getResponseContentType(value: any): string | null {\n    return value.headers\n      ? value.headers[\"content-type\"] || value.headers[\"Content-Type\"]\n      : null;\n  },\n\n  mimeToExtension(value: string) {\n    let extension = mime.getExtension(value);\n    if (extension == \"mpga\") return \"mp3\";\n    return extension;\n  },\n\n  extractURLExtension(value: string) {\n    const extname = path.extname(new URL(value).pathname);\n    return extname.substring(1).toLowerCase();\n  },\n\n  getDateString(format = \"yyyy-MM-dd\", date = new Date()) {\n    return dateFormat(date, format);\n  },\n\n  getIPAddressesByIPv4(): string[] {\n    const interfaces = os.networkInterfaces();\n    const addresses = [];\n    for (let name in interfaces) {\n      const networks = interfaces[name];\n      const results = networks.filter(\n        (network) =>\n          network.family === \"IPv4\" &&\n          network.address !== \"127.0.0.1\" &&\n          !network.internal\n      );\n      if (results[0] && results[0].address) addresses.push(results[0].address);\n    }\n    return addresses;\n  },\n\n  getMACAddressesByIPv4(): string[] {\n    const interfaces = os.networkInterfaces();\n    const addresses = [];\n    for (let name in interfaces) {\n      const networks = interfaces[name];\n      const results = networks.filter(\n        (network) =>\n          network.family === \"IPv4\" &&\n          network.address !== \"127.0.0.1\" &&\n          !network.internal\n      );\n      if (results[0] && results[0].mac) addresses.push(results[0].mac);\n    }\n    return addresses;\n  },\n\n  generateSSEData(event?: string, data?: string, retry?: number) {\n    return `event: ${event || \"message\"}\\ndata: ${(data || \"\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\s/g, \"\\\\s\")}\\nretry: ${retry || 3000}\\n\\n`;\n  },\n\n  buildDataBASE64(type, ext, buffer) {\n    return `data:${type}/${ext.replace(\"jpg\", \"jpeg\")};base64,${buffer.toString(\n      \"base64\"\n    )}`;\n  },\n\n  isLinux() {\n    return os.platform() !== \"win32\";\n  },\n\n  isIPAddress(value) {\n    return (\n      _.isString(value) &&\n      (/^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$/.test(\n        value\n      ) ||\n        /\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*/.test(\n          value\n        ))\n    );\n  },\n\n  isPort(value) {\n    return _.isNumber(value) && value > 0 && value < 65536;\n  },\n\n  isReadStream(value): boolean {\n    return (\n      value &&\n      (value instanceof Readable || \"readable\" in value || value.readable)\n    );\n  },\n\n  isWriteStream(value): boolean {\n    return (\n      value &&\n      (value instanceof Writable || \"writable\" in value || value.writable)\n    );\n  },\n\n  isHttpStatusCode(value) {\n    return _.isNumber(value) && Object.values(HTTP_STATUS_CODE).includes(value);\n  },\n\n  isURL(value) {\n    return !_.isUndefined(value) && /^(http|https)/.test(value);\n  },\n\n  isSrc(value) {\n    return !_.isUndefined(value) && /^\\/.+\\.[0-9a-zA-Z]+(\\?.+)?$/.test(value);\n  },\n\n  isBASE64(value) {\n    return !_.isUndefined(value) && /^[a-zA-Z0-9\\/\\+]+(=?)+$/.test(value);\n  },\n\n  isBASE64Data(value) {\n    return /^data:/.test(value);\n  },\n\n  extractBASE64DataFormat(value): string | null {\n    const match = value.trim().match(/^data:(.+);base64,/);\n    if (!match) return null;\n    return match[1];\n  },\n\n  removeBASE64DataHeader(value): string {\n    return value.replace(/^data:(.+);base64,/, \"\");\n  },\n\n  isDataString(value): boolean {\n    return /^(base64|json):/.test(value);\n  },\n\n  isStringNumber(value) {\n    return _.isFinite(Number(value));\n  },\n\n  isUnixTimestamp(value) {\n    return /^[0-9]{10}$/.test(`${value}`);\n  },\n\n  isTimestamp(value) {\n    return /^[0-9]{13}$/.test(`${value}`);\n  },\n\n  isEmail(value) {\n    return /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/.test(\n      value\n    );\n  },\n\n  isAsyncFunction(value) {\n    return Object.prototype.toString.call(value) === \"[object AsyncFunction]\";\n  },\n\n  async isAPNG(filePath) {\n    let head;\n    const readStream = fs.createReadStream(filePath, { start: 37, end: 40 });\n    const readPromise = new Promise((resolve, reject) => {\n      readStream.once(\"end\", resolve);\n      readStream.once(\"error\", reject);\n    });\n    readStream.once(\"data\", (data) => (head = data));\n    await readPromise;\n    return head.compare(Buffer.from([0x61, 0x63, 0x54, 0x4c])) === 0;\n  },\n\n  unixTimestamp() {\n    return parseInt(`${Date.now() / 1000}`);\n  },\n\n  timestamp() {\n    return Date.now();\n  },\n\n  urlJoin(...values) {\n    let url = \"\";\n    for (let i = 0; i < values.length; i++)\n      url += `${i > 0 ? \"/\" : \"\"}${values[i]\n        .replace(/^\\/*/, \"\")\n        .replace(/\\/*$/, \"\")}`;\n    return url;\n  },\n\n  millisecondsToHmss(milliseconds) {\n    if (_.isString(milliseconds)) return milliseconds;\n    milliseconds = parseInt(milliseconds);\n    const sec = Math.floor(milliseconds / 1000);\n    const hours = Math.floor(sec / 3600);\n    const minutes = Math.floor((sec - hours * 3600) / 60);\n    const seconds = sec - hours * 3600 - minutes * 60;\n    const ms = (milliseconds % 60000) - seconds * 1000;\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${seconds > 9 ? seconds : \"0\" + seconds}.${ms}`;\n  },\n\n  millisecondsToTimeString(milliseconds) {\n    if (milliseconds < 1000) return `${milliseconds}ms`;\n    if (milliseconds < 60000)\n      return `${parseFloat((milliseconds / 1000).toFixed(2))}s`;\n    return `${Math.floor(milliseconds / 1000 / 60)}m${Math.floor(\n      (milliseconds / 1000) % 60\n    )}s`;\n  },\n\n  rgbToHex(r, g, b): string {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  },\n\n  hexToRgb(hex) {\n    const value = parseInt(hex.replace(/^#/, \"\"), 16);\n    return [(value >> 16) & 255, (value >> 8) & 255, value & 255];\n  },\n\n  md5(value) {\n    return crypto.createHash(\"md5\").update(value).digest(\"hex\");\n  },\n\n  arrayParse(value): any[] {\n    return _.isArray(value) ? value : [value];\n  },\n\n  booleanParse(value) {\n    return value === \"true\" || value === true ? true : false;\n  },\n\n  encodeBASE64(value) {\n    return Buffer.from(value).toString(\"base64\");\n  },\n\n  decodeBASE64(value) {\n    return Buffer.from(value, \"base64\").toString();\n  },\n\n  async fetchFileBASE64(url: string) {\n    const result = await axios.get(url, {\n      responseType: \"arraybuffer\",\n    });\n    return result.data.toString(\"base64\");\n  },\n};\n\nexport default util;\n","export default {\n\n    CONTINUE: 100,  //客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应\n    SWITCHING_PROTOCOLS: 101,  //服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源\n    PROCESSING: 102,  //处理将被继续执行\n\n    OK: 200,  //请求已成功，请求所希望的响应头或数据体将随此响应返回\n    CREATED: 201,  //请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'\n    ACCEPTED: 202,  //服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成\n    NON_AUTHORITATIVE_INFO: 203,  //服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的\n    NO_CONTENT: 204,  //服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾\n    RESET_CONTENT: 205,  //服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束\n    PARTIAL_CONTENT: 206,  //服务器已经成功处理了部分 GET 请求。类似于FlashGet或者迅雷这类的HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。响应必须包含如下的头部域：Content-Range 用以指示本次响应中返回的内容的范围；如果是Content-Type为multipart/byteranges的多段下载，则每一段multipart中都应包含Content-Range域用以指示本段的内容范围。假如响应中包含Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。Date和ETag或Content-Location，假如同样的请求本应该返回200响应。Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。假如 ETag 或 Latest-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容\n    MULTIPLE_STATUS: 207,  //代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码\n\n    MULTIPLE_CHOICES: 300,  //被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的\n    MOVED_PERMANENTLY: 301,  //被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式\n    FOUND: 302,  //请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI应当在响应的 Location 域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应\n    SEE_OTHER: 303,  //对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。新的 URI 应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。注意：许多 HTTP/1.1 版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的\n    NOT_MODIFIED: 304,  //如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。该响应必须包含以下的头信息：Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将Date字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。ETag或 Content-Location，假如同样的请求本应返回200响应。Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值\n    USE_PROXY: 305,  //被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果\n    UNUSED: 306,  //在最新版的规范中，306状态码已经不再被使用\n    TEMPORARY_REDIRECT: 307,  //请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI 应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化\n\n    BAD_REQUEST: 400,  //1.语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求 2.请求参数有误\n    UNAUTHORIZED: 401,  //当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617\n    PAYMENT_REQUIRED: 402,  //该状态码是为了将来可能的需求而预留的\n    FORBIDDEN: 403,  //服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息\n    NOT_FOUND: 404,  //请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下\n    METHOD_NOT_ALLOWED: 405,  //请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误\n    NO_ACCEPTABLE: 406,  //请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准\n    PROXY_AUTHENTICATION_REQUIRED: 407,  //与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。参见RFC 2617\n    REQUEST_TIMEOUT: 408,  //请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改\n    CONFLICT: 409,  //由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。冲突通常发生于对PUT请求的处理中。例如，在采用版本检查的环境下，某次PUT提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本\n    GONE: 410,  //被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为'410 Gone'，以及是否需要保持此标记多长时间，完全取决于服务器拥有者\n    LENGTH_REQUIRED: 411,  //服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求 \n    PRECONDITION_FAILED: 412,  //服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上\n    REQUEST_ENTITY_TOO_LARGE: 413,  //服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试\n    REQUEST_URI_TOO_LONG: 414,  //请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。重定向URI “黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码\n    UNSUPPORTED_MEDIA_TYPE: 415,  //对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝\n    REQUESTED_RANGE_NOT_SATISFIABLE: 416,  //如果请求中包含了Range请求头，并且Range中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义If-Range请求头，那么服务器就应当返回416状态码。假如Range使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个Content-Range实体头，用以指明当前资源的长度。这个响应也被禁止使用multipart/byteranges作为其 Content-Type\n    EXPECTION_FAILED: 417,  //在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足\n    TOO_MANY_CONNECTIONS: 421,  //从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户\n    UNPROCESSABLE_ENTITY: 422,  //请求格式正确，但是由于含有语义错误，无法响应\n    FAILED_DEPENDENCY: 424,  //由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH\n    UNORDERED_COLLECTION: 425,  //在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中\n    UPGRADE_REQUIRED: 426,  //客户端应当切换到TLS/1.0\n    RETRY_WITH: 449,  //由微软扩展，代表请求应当在执行完适当的操作后进行重试\n\n    INTERNAL_SERVER_ERROR: 500,  //服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现\n    NOT_IMPLEMENTED: 501, //服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求\n    BAD_GATEWAY: 502, //作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应\n    SERVICE_UNAVAILABLE: 503,  //由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接\n    GATEWAY_TIMEOUT: 504,  //作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。注意：某些代理服务器在DNS查询超时时会返回400或者500错误\n    HTTP_VERSION_NOT_SUPPORTED: 505,  //服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体\n    VARIANT_ALSO_NEGOTIATES: 506,  //服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点\n    INSUFFICIENT_STORAGE: 507,  //服务器无法存储完成请求所必须的内容。这个状况被认为是临时的\n    BANDWIDTH_LIMIT_EXCEEDED: 509,  //服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用\n    NOT_EXTENDED: 510  //获取资源所需要的策略并没有没满足\n\n};","import mime from 'mime';\nimport _ from 'lodash';\n\nimport Body from './Body.ts';\nimport util from '../util.ts';\n\nexport interface ResponseOptions {\n    statusCode?: number;\n    type?: string;\n    headers?: Record<string, any>;\n    redirect?: string;\n    body?: any;\n    size?: number;\n    time?: number;\n}\n\nexport default class Response {\n\n    /** 响应HTTP状态码 */\n    statusCode: number;\n    /** 响应内容类型 */\n    type: string;\n    /** 响应headers */\n    headers: Record<string, any>;\n    /** 重定向目标 */\n    redirect: string;\n    /** 响应载荷 */\n    body: any;\n    /** 响应载荷大小 */\n    size: number;\n    /** 响应时间戳 */\n    time: number;\n\n    constructor(body: any, options: ResponseOptions = {}) {\n        const { statusCode, type, headers, redirect, size, time } = options;\n        this.statusCode = Number(_.defaultTo(statusCode, Body.isInstance(body) ? body.statusCode : undefined))\n        this.type = type;\n        this.headers = headers;\n        this.redirect = redirect;\n        this.size = size;\n        this.time = Number(_.defaultTo(time, util.timestamp()));\n        this.body = body;\n    }\n\n    injectTo(ctx) {\n        this.redirect && ctx.redirect(this.redirect);\n        this.statusCode && (ctx.status = this.statusCode);\n        this.type && (ctx.type = mime.getType(this.type) || this.type);\n        const headers = this.headers || {};\n        if(this.size && !headers[\"Content-Length\"] && !headers[\"content-length\"])\n            headers[\"Content-Length\"] = this.size;\n        ctx.set(headers);\n        if(Body.isInstance(this.body))\n            ctx.body = this.body.toObject();\n        else\n            ctx.body = this.body;\n    }\n\n    static isInstance(value) {\n        return value instanceof Response;\n    }\n\n}","import  _ from 'lodash';\n\nexport interface BodyOptions {\n    code?: number;\n    message?: string;\n    data?: any;\n    statusCode?: number;\n}\n\nexport default class Body {\n\n    /** 状态码 */\n    code: number;\n    /** 状态消息 */\n    message: string;\n    /** 载荷 */\n    data: any;\n    /** HTTP状态码 */\n    statusCode: number;\n\n    constructor(options: BodyOptions = {}) {\n        const { code, message, data, statusCode } = options;\n        this.code = Number(_.defaultTo(code, 0));\n        this.message = _.defaultTo(message, 'OK');\n        this.data = _.defaultTo(data, null);\n        this.statusCode = Number(_.defaultTo(statusCode, 200));\n    }\n\n    toObject() {\n        return {\n            code: this.code,\n            message: this.message,\n            data: this.data\n        };\n    }\n\n    static isInstance(value) {\n        return value instanceof Body;\n    }\n\n}","import _ from 'lodash';\n\nimport Body from './Body.ts';\nimport Exception from '../exceptions/Exception.ts';\nimport APIException from '../exceptions/APIException.ts';\nimport EX from '../consts/exceptions.ts';\nimport HTTP_STATUS_CODES from '../http-status-codes.ts';\n\nexport default class FailureBody extends Body {\n    \n    constructor(error: APIException | Exception | Error, _data?: any) {\n        let errcode, errmsg, data = _data, httpStatusCode = HTTP_STATUS_CODES.OK;;\n        if(_.isString(error))\n            error = new Exception(EX.SYSTEM_ERROR, error);\n        else if(error instanceof APIException || error instanceof Exception)\n            ({ errcode, errmsg, data, httpStatusCode } = error);\n        else if(_.isError(error))\n        ({ errcode, errmsg, data, httpStatusCode } = new Exception(EX.SYSTEM_ERROR, error.message));\n        super({\n            code: errcode || -1,\n            message: errmsg || 'Internal error',\n            data,\n            statusCode: httpStatusCode\n        });\n    }\n\n    static isInstance(value) {\n        return value instanceof FailureBody;\n    }\n\n}","export default {\n    SYSTEM_ERROR: [-1000, '系统异常'],\n    SYSTEM_REQUEST_VALIDATION_ERROR: [-1001, '请求参数校验错误'],\n    SYSTEM_NOT_ROUTE_MATCHING: [-1002, '无匹配的路由']\n} as Record<string, [number, string]>","import fs from \"fs-extra\";\nimport _ from \"lodash\";\n\nimport IQuestion from \"./interfaces/IQuestion.ts\";\nimport IMessage from \"./interfaces/IMessage.ts\";\nimport { MessageType } from \"@/lib/enums.ts\";\nimport api from \"./api.ts\";\nimport tools from \"./tools.ts\";\nimport llm from \"./llm.ts\";\nimport config from \"./config.ts\";\nimport logger from \"./logger.ts\";\n\n// 任务的最大交互轮次\nconst MAX_ROUNDS = config.task.max_rounds;\n// 任务的最大重试轮次\nconst MAX_RETRY_ROUNDS = config.task.max_retry_rounds;\n// 题目分类\nconst QUESTION_CATEGORYS = [\n  [\"公司信息\", \"查询指定公司的基本信息、注册信息、子公司等相关信息\"],\n  [\n    \"历史案件\",\n    \"根据案号、案由、原告被告等信息查询法律文书历史案件，查询案件的判决所依据的法律条文，查询律师事务所法律代理等信息等\",\n  ],\n  [\"法律条文\", \"查询法律概念或了解法条内容\"],\n  [\"日常聊天\", \"用户可能只是想跟你聊两句\"],\n];\n\nasync function getQuestions(filename: string): Promise<IQuestion[]> {\n  const raw = (await fs.readFile(filename)).toString();\n  const list = raw.split(\"\\n\");\n  if (list[list.length - 1].trim() == \"\") list.pop();\n  return list.map((v) => JSON.parse(v));\n}\n\n/**\n * 生成问题答案\n *\n * @param question 问题对象\n */\nasync function generateAnswer(\n  question: string,\n  messageCallback?: (msg: IMessage) => void\n) {\n  messageCallback = messageCallback || (() => {});\n  // 交互轮次\n  let rounds = 0;\n  // 重试轮次\n  let retryRounds = 0;\n  // 最后一次工具调用信息\n  let latestToolCallTemp;\n  // 最后一次答案内容\n  let latestAnswer = \"\";\n  // 问题分类\n  let classifys;\n  // 多个分类生成的答案\n  let answers = [];\n  // 统计消耗的总Token数量\n  let totalTokens = 0;\n  // 插入在问题后面的内容\n  let afterContent = \"\";\n  // 消息上下文\n  let history = [];\n  // 禁用工具名称列表\n  let disableToolNames = [];\n  // 工具调用日志\n  let toolCallLog = \"\";\n  while (true) {\n    // 判断交互轮次是否超过最大轮次\n    if (rounds++ >= MAX_ROUNDS) break;\n    if (\n      answers.length > 0 &&\n      answers.filter((v) => v.content).length == answers.length\n    ) {\n      // 答案聚合\n      const allAnswer = answers.reduce(\n        (str, v, i) => `${str}${v.content}\\n\\n`,\n        \"\"\n      );\n      messageCallback({ type: MessageType.Consulting, title: \"✍️ 优化答案\" });\n      // 答案整理复述\n      latestAnswer = await llm.answerRephrase(\n        question,\n        allAnswer,\n        (tokens) => (totalTokens += tokens)\n      );\n      // 阶段性答案\n      console.log(`阶段性答案：${latestAnswer}`);\n      messageCallback({\n        type: MessageType.Consulting,\n        title: \"✍️ 优化答案\",\n        data: latestAnswer,\n        finish: true,\n      });\n      messageCallback({ type: MessageType.Consulting, title: \"🔍 检查答案\" });\n      // 检查任务是否完成，否则提供进一步指导\n      const { completed, explain } = await llm.checkTaskCompleted(\n        question,\n        latestAnswer,\n        history,\n        retryRounds,\n        (tokens) => (totalTokens += tokens)\n      );\n      if (!completed) {\n        // 判断重试轮次是否超过最大轮次\n      if (++retryRounds >= MAX_RETRY_ROUNDS) break;\n        messageCallback({\n          type: MessageType.Consulting,\n          title: \"🔍 检查答案\",\n          data: `答案检查不通过：${explain}`,\n          error: true,\n        });\n        latestToolCallTemp = undefined;\n        history = [];\n        // 插入答案和进一步指导\n        history.push({\n          role: \"user\",\n          content: `${latestAnswer}\\n\\n以上答案不完整，请使用工具来查询完善！\\n目前缺失信息：\\n${explain}`,\n        });\n        logger.warn(`[不完整的答案] ${latestAnswer}`);\n        logger.warn(`[新一轮任务提示] ${explain}`);\n        // 清空分类，下一轮重新分类\n        classifys = undefined;\n        // 清空答案\n        answers = [];\n        continue;\n      }\n      messageCallback({\n        type: MessageType.Consulting,\n        title: \"🔍 检查答案\",\n        data: \"检查通过\",\n        finish: true,\n      });\n      break;\n    }\n    // 问题分类\n    if (!classifys) {\n      messageCallback({ type: MessageType.Classify, title: \"🔀 问题分类\" });\n      classifys = await llm.questionClassify(\n        question,\n        QUESTION_CATEGORYS,\n        (tokens) => (totalTokens += tokens)\n      );\n      messageCallback({\n        type: MessageType.Classify,\n        title: \"🔀 问题分类\",\n        data: classifys,\n        finish: true,\n      });\n    }\n    if (classifys.length == 0) {\n      classifys = undefined;\n      continue;\n    }\n    // 答案生成\n    answers = [];\n    for (let classify of classifys) {\n      let answer: {\n        content: string;\n        calls: {\n          id: string;\n          name: string;\n          args: any;\n        }[];\n      };\n      switch (classify) {\n        case \"法律条文\":\n          if (\n            !history[history.length - 1] ||\n            history[history.length - 1].role != \"tool\"\n          )\n            messageCallback({\n              type: MessageType.Consulting,\n              title: \"📚️ 咨询法律条文\",\n            });\n          // 生成法律条文答案\n          answer = await llm.consultingLegalConcept(\n            question,\n            history,\n            afterContent,\n            (tokens) => totalTokens + tokens\n          );\n          answer.content &&\n            messageCallback({\n              type: MessageType.Consulting,\n              title: \"📚️ 咨询法律条文\",\n              data: answer.content,\n              finish: true,\n            });\n          break;\n        case \"公司信息\":\n          if (\n            !history[history.length - 1] ||\n            history[history.length - 1].role != \"tool\"\n          )\n            messageCallback({\n              type: MessageType.Consulting,\n              title: \"🏢 咨询公司信息\",\n            });\n          // 生成公司信息答案\n          answer = await llm.consultingCompanyInfo(\n            question,\n            history,\n            afterContent,\n            disableToolNames,\n            (tokens) => (totalTokens += tokens)\n          );\n          answer.content &&\n            messageCallback({\n              type: MessageType.Consulting,\n              title: \"🏢 咨询公司信息\",\n              data: answer.content,\n              finish: true,\n            });\n          break;\n        case \"历史案件\":\n          if (\n            !history[history.length - 1] ||\n            history[history.length - 1].role != \"tool\"\n          )\n            messageCallback({\n              type: MessageType.Consulting,\n              title: \"⚖️ 咨询历史案件\",\n            });\n          // 生成历史案件答案\n          answer = await llm.consultingLegalDocument(\n            question,\n            history,\n            afterContent,\n            disableToolNames,\n            (tokens) => totalTokens + tokens\n          );\n          answer.content &&\n            messageCallback({\n              type: MessageType.Consulting,\n              title: \"⚖️ 咨询历史案件\",\n              data: answer.content,\n              finish: true,\n            });\n          break;\n        case \"日常聊天\":\n          messageCallback({\n            type: MessageType.Consulting,\n            title: \"😀 回答问题\",\n          });\n          const result = await llm.communication(\n            question,\n            (tokens) => totalTokens + tokens\n          );\n          logger.success(`消耗Token数量【${totalTokens}】`);\n          messageCallback({\n            type: MessageType.Consulting,\n            title: \"😀 回答问题\",\n            data: result,\n            finish: true,\n            tokens: totalTokens,\n          });\n          return {\n            answer: result,\n            totalTokens: totalTokens,\n          };\n        default:\n          messageCallback({\n            type: MessageType.Consulting,\n            title: \"🌐 网络检索\",\n          });\n          logger.warn(`[意料之外的问题分类，将使用网络检索] ${classify}`);\n          answer = {\n            content: await api.webSearch(question),\n            calls: [],\n          };\n          messageCallback({\n            type: MessageType.Consulting,\n            title: \"🌐 网络检索\",\n            finish: true,\n          });\n      }\n      answers.push(answer);\n    }\n    // 清空禁用的工具名称\n    disableToolNames = [];\n    // 调用工具\n    for (let answer of answers) {\n      for (let call of answer.calls) {\n        const callTemp = JSON.stringify(\n          `${call.name}${Object.entries(call.args).reduce(\n            (str, v) => str + v,\n            \"\"\n          )}`\n        );\n        if (latestToolCallTemp && latestToolCallTemp == callTemp) {\n          disableToolNames.push(call.name);\n          logger.warn(\n            `[本轮已禁用${disableToolNames.join(\"、\")}工具防止重复调用]`\n          );\n          afterContent = `工具调用日志：\\n${toolCallLog}\\n\\n如果题目还需要其它信息请修改参数调用工具查询相应信息，否则请直接回答问题。`;\n        } else {\n          latestToolCallTemp = callTemp;\n          messageCallback({\n            type: MessageType.CallTool,\n            title: \"🔧 工具调用\",\n            data: call,\n          });\n          let toolResult = await tools.toolCallDistribution(\n            call.name,\n            call.args,\n            messageCallback\n          );\n          toolCallLog += `已调用${call.name}，参数：${Object.entries(\n            call.args\n          ).reduce((str, v) => str + v[0] + \"=\" + v[1] + \";\", \"\")}\\n`;\n          // 工具调用结果\n          console.log(`工具调用结果：${toolResult}`);\n          history.push({\n            role: \"tool\",\n            content: `工具查询结果：\\n${toolResult}`,\n            tool_call_id: call.id,\n          });\n          messageCallback({\n            type: MessageType.CallTool,\n            title: \"🔧 工具调用\",\n            data: toolResult,\n            finish: true,\n          });\n        }\n      }\n    }\n  }\n  // 没有找到答案时使用网络检索\n  if (!latestAnswer) {\n    logger.warn(`[法律API无法解决该问题，将使用网络检索]`);\n    latestAnswer = await api.webSearch(question);\n  }\n  logger.success(`消耗Token数量【${totalTokens}】`);\n  return {\n    answer: latestAnswer,\n    totalTokens,\n  };\n}\n\nasync function generateQuestionAnswer(\n  param: string,\n  messageCallback?: (msg: IMessage) => void\n) {\n  try {\n    if (!param) throw new Error(\"Question param must be provided\");\n    let query: string;\n    if (_.isNumber(param)) {\n      const id = Number(param);\n      const questions = await getQuestions(\"question.jsonl\");\n      if (!questions[id]) throw new Error(`Question ${id} not found`);\n      query = questions[id].question;\n    } else query = param;\n    console.log(`\\n\\n题目：${query}`);\n    // 读取结果列表，可在中断处继续\n    const results = await getQuestions(\"result.jsonl\");\n    messageCallback({\n      type: MessageType.Question,\n      title: \"👀 阅读问题\",\n      data: query,\n      finish: true,\n    });\n    const { answer, totalTokens } = await generateAnswer(\n      query,\n      messageCallback\n    );\n    const result = {\n      id: results[results.length - 1].id + 1,\n      question: query,\n      answer\n    };\n    await fs.appendFile(\"result.jsonl\", `${JSON.stringify(result)}\\n`);\n    console.log(`答案：${answer}`);\n    messageCallback({\n      type: MessageType.Answer,\n      title: \"🤖 答案输出\",\n      data: answer,\n      finish: true,\n      tokens: totalTokens\n    });\n    return {\n      answer,\n      totalTokens,\n    };\n  } catch (err) {\n    messageCallback({\n      type: MessageType.Consulting,\n      title: \"❌ 解答失败\",\n      data: err.message,\n      error: true,\n    });\n  }\n}\n\nasync function generateQuestionsAnswer() {\n  // 创建结果文件\n  await fs.ensureFile(\"result.jsonl\");\n  // 读取题目列表\n  const questions = await getQuestions(\"question.jsonl\");\n  // 读取结果列表，可在中断处继续\n  const results = await getQuestions(\"result.jsonl\");\n  if (questions.length == results.length)\n    logger.info(\"所有题目已经完成回答，如果需要重新回答请删除result.jsonl\");\n  for (let question of questions.slice(results.length)) {\n    await (async () => {\n    //   console.time();\n      console.log(\n        `\\n\\n题目（${question.id + 1}/${questions.length}）：${\n          question.question\n        }`\n      );\n      // 生成问题的答案\n      const { answer, totalTokens } = await generateAnswer(question.question);\n      const result = {\n        id: question.id,\n        question: question.question,\n        answer,\n      };\n      // 写入结果\n      await fs.appendFile(\"result.jsonl\", `${JSON.stringify(result)}\\n`);\n      console.log(\n        `答案（${question.id + 1}/${questions.length}）：${answer}\\n\\n`\n      );\n    //   console.timeEnd();\n    })().catch((err) => {\n      const result = {\n        id: question.id,\n        question: question.question,\n        answer: `问题处理失败：${err.message}`,\n      };\n      // 写入失败的结果\n      fs.appendFile(\"result.jsonl\", `${JSON.stringify(result)}\\n`);\n      logger.error(err);\n    });\n  }\n}\n\nexport default {\n  getQuestions,\n  generateQuestionsAnswer,\n  generateQuestionAnswer,\n};\n","import axios from \"axios\";\nimport _ from \"lodash\";\nimport logger from \"./logger.ts\";\n\nimport IMessage from \"./interfaces/IMessage.ts\";\nimport { MessageType } from \"@/lib/enums.ts\";\nimport ICompanyInfo from \"./interfaces/ICompanyInfo.ts\";\nimport ICompanyRegister from \"./interfaces/ICompanyRegister.ts\";\nimport ISubCompanyInfo from \"./interfaces/ISubCompanyInfo.ts\";\nimport ILegalDocument from \"./interfaces/ILegalDocument.ts\";\nimport config from \"./config.ts\";\n\n// 法律API\nconst LAW_API_ENDPOINT = config.law_api.endpoint;\nconst LAW_API_TOKEN = config.law_api.token;\nconst LAW_API_CONCURRENT = config.law_api.concurrent;\n\n// 网络检索API\nconst WEB_SEARCH_MODEL = config.web_search.model;\nconst WEB_SEARCH_ENDPOINT = config.web_search.endpoint;\nconst WEB_SEARCH_TOKEN = config.web_search.token;\n\n/**\n * 根据公司名称获取公司信息\n * \n * @param companyName 公司名称\n * @returns 公司信息\n */\nasync function getCompanyInfoByCompanyName(companyName: string, messageCallback: (msg: IMessage) => void): Promise<(ICompanyInfo&ICompanyRegister)|null> {\n    logger.info(`[正通过公司名称查询公司信息] ${companyName}`);\n    const [\n        info,\n        register\n    ] = await Promise.all([\n        requestObj('/get_company_info', {\n            company_name: companyName\n        }, messageCallback),\n        getCompanyRegisterByCompanyName(companyName, messageCallback)\n    ]);\n    if(info) {\n        // 去除干扰项\n        delete info['经营范围'];\n        register ? logger.success(`[成功找到公司信息和注册信息] ${companyName}`) : logger.success(`[成功找到公司信息] ${companyName}`);\n        return Object.assign(info, register);\n    }\n    const _companyName = (await Promise.all([\n        searchCompanyNameByInfo({ '公司简称': companyName }, messageCallback),\n        searchCompanyNameByInfo({ '英文名称': companyName }, messageCallback),\n        searchCompanyNameByInfo({ '曾用简称': companyName }, messageCallback)\n    ])).filter(v => v)[0];\n    if(!_companyName) {\n        register ? logger.success(`[未找到公司信息但找到注册信息] ${companyName}`) : logger.error(`[未找到此公司信息] ${companyName}`);\n        return register;\n    }\n    const [_info, _register] = await Promise.all([\n        requestObj('/get_company_info', {\n            company_name: _companyName\n        }, messageCallback),\n        getCompanyRegisterByCompanyName(_companyName, messageCallback)\n    ])\n    if(_info) {\n        // 去除干扰项\n        delete _info['经营范围'];\n        logger.success(`[成功找到公司信息] ${_companyName}`);\n        return Object.assign(_info, _register || {});\n    }\n    if(!_register)\n        logger.error(`[未找到此公司信息] ${_companyName}`);\n    logger.success(`[成功找到公司信息] ${_companyName}`);\n    return _register;\n}\n\n/**\n * 根据股票代码获取公司信息\n * \n * @param stockCode 股票代码\n * @returns 公司信息\n */\nasync function getCompanyInfoByStockCode(stockCode: string, messageCallback: (msg: IMessage) => void): Promise<ICompanyInfo|null> {\n    logger.info(`[正通过股票代码查询公司名称] ${stockCode}`);\n    const companyName = await searchCompanyNameByInfo({ '公司代码': stockCode.trim() }, messageCallback);\n    if(!companyName) {\n        logger.error(`[未找到股票代码为${stockCode}的公司]`);\n        return null;\n    }\n    const result = await getCompanyInfoByCompanyName(companyName, messageCallback);\n    if(!result)\n        logger.error(`[未找到股票代码为${stockCode}的公司]`);\n    else\n        logger.success(`[已找到股票代码为${stockCode}的公司] ${companyName}`);\n    return result;\n}\n\n/**\n * 根据注册号获取公司信息\n * \n * @param registerCode 注册号\n * @returns 公司信息\n */\nasync function getCompanyInfoByRegisterCode(registerCode: string, messageCallback: (msg: IMessage) => void): Promise<ICompanyInfo|null> {\n    logger.info(`[正通过注册号查询公司名称] ${registerCode}`);\n    const companyName = await searchCompanyNameByRegister({ '注册号': registerCode.trim() }, messageCallback);\n    if(!companyName) {\n        logger.error(`[未找到注册号为${registerCode}的公司]`);\n        return null;\n    }\n    const result = await getCompanyInfoByCompanyName(companyName, messageCallback);\n    if(!result)\n        logger.error(`[未找到注册号为${registerCode}的公司]`);\n    else\n        logger.success(`[已找到注册号为${registerCode}的公司] ${companyName}`);\n    return result;\n}\n\n/**\n * 根据所属行业名称获取公司信息列表\n * \n * @param industry 行业名称\n * @returns 公司信息列表\n */\nasync function getCompanyInfoListTextByIndustry(industry: string, messageCallback: (msg: IMessage) => void): Promise<(ICompanyInfo&ICompanyRegister)[]> {\n    logger.info(`[正通过所属行业查询公司名称] ${industry}`);\n    const companyNames = await searchCompanyNamesByInfo({\n        '所属行业': industry.trim()\n    }, messageCallback);\n    if(companyNames.length == 0) {\n        logger.error(`[未找到归属${industry}行业的公司]`);\n        return [];\n    }\n    let infos = [];\n    let tasks = [];\n    while(infos.length != companyNames.length) {\n        const name = companyNames[infos.length + tasks.length];\n        if(tasks.length < Math.min(LAW_API_CONCURRENT, companyNames.length - infos.length)) {\n            tasks.push(getCompanyInfoByCompanyName(name, messageCallback));\n            continue\n        }\n        infos = infos.concat((await Promise.all(tasks)).filter(v => v));\n        tasks = [];\n    }\n    logger.success(`[已找到归属${industry}行业的公司] ${infos.length}家`);\n    return infos;\n}\n\n/**\n * 根据公司基本信息某个字段是某个值来查询具体的公司名称\n * \n * @param options 公司基本信息选项\n * @returns 公司名称列表\n */\nasync function searchCompanyNameByInfo(options: ICompanyInfo, messageCallback: (msg: IMessage) => void): Promise<string|null> {\n    const result = await requestObj('/search_company_name_by_info', optionsConvert(options), messageCallback) as ICompanyInfo;\n    if(!result)\n        return null;\n    return result['公司名称'];\n}\n\n/**\n * 根据公司基本信息某个字段是某个值来查询所有相关公司名称\n * \n * @param options 公司基本信息选项\n * @returns 公司名称列表\n */\nasync function searchCompanyNamesByInfo(options: ICompanyInfo, messageCallback: (msg: IMessage) => void): Promise<string[]> {\n    const list = await requestList('/search_company_name_by_info', optionsConvert(options), messageCallback) as ICompanyInfo[];\n    return list.map(v => v['公司名称']);\n}\n\n/**\n * 根据公司名称获得该公司所有注册信息\n * \n * @param companyName 公司名称\n * @returns \n */\nasync function getCompanyRegisterByCompanyName(companyName: string, messageCallback: (msg: IMessage) => void): Promise<ICompanyRegister|null> {\n    return await requestObj('/get_company_register', {\n        company_name: companyName.trim()\n    }, messageCallback);\n}\n\n/**\n * 根据公司注册信息某个字段是某个值来查询具体的公司名称\n * \n * @param companyName 公司名称\n */\nasync function searchCompanyNameByRegister(options: ICompanyRegister, messageCallback: (msg: IMessage) => void): Promise<string> {\n    const result = await requestObj('/search_company_name_by_register', optionsConvert(options), messageCallback);\n    if(!result)\n        return null;\n    return result['公司名称'];\n}\n\n/**\n * 根据母公司全称或股票简称获取所有子公司信息\n * \n * @param companyName 母公司名称\n */\nasync function getSubCompanyInfoListByCompanyName(companyName: string, messageCallback: (msg: IMessage) => void): Promise<ISubCompanyInfo[]> {\n    logger.info(`[正通过母公司名称查询子公司信息] ${companyName}`);\n    let subCompanyNames = (await Promise.all([\n        searchSubCompanyNamesBySubInfo({ '关联上市公司全称': companyName }, messageCallback),\n        searchSubCompanyNamesBySubInfo({ '关联上市公司股票简称': companyName }, messageCallback)\n    ])).reduce((arr, v) => [...arr, ...v], []);\n    if(subCompanyNames.length == 0) {\n        const companyInfo = await getCompanyInfoByCompanyName(companyName, messageCallback);\n        if(!companyInfo) {\n            logger.error(`[未找到${companyName}的子公司]`);\n            return [];\n        }\n        subCompanyNames = await searchSubCompanyNamesBySubInfo({ '关联上市公司全称': companyInfo['公司名称'] }, messageCallback);\n        if(subCompanyNames.length == 0) {\n            logger.error(`[未找到${companyName}的子公司]`);\n            return [];\n        }\n    }\n    let infos = [];\n    let tasks = [];\n    while(infos.length != subCompanyNames.length) {\n        const name = subCompanyNames[infos.length + tasks.length];\n        if(tasks.length < Math.min(LAW_API_CONCURRENT, subCompanyNames.length - infos.length)) {\n            tasks.push(getSubCompanyInfoBySubCompanyName(name, messageCallback));\n            continue\n        }\n        infos = infos.concat((await Promise.all(tasks)).filter(v => v));\n        tasks = [];\n    }\n    logger.success(`[已找到${companyName}的子公司] ${infos.length}家`);\n    return infos;\n}\n\n/**\n * 根据子公司名称获取子公司信息\n * \n * @param subCompanyName 子公司名称\n */\nasync function getSubCompanyInfoBySubCompanyName(subCompanyName: string, messageCallback: (msg: IMessage) => void): Promise<ISubCompanyInfo|null> {\n    logger.info(`[正通过子公司名称查询子公司信息] ${subCompanyName}`);\n    const result = await requestObj('/get_sub_company_info', {\n        company_name: subCompanyName.trim().trim()\n    }, messageCallback);\n    if(!result)\n        logger.error(`[未找到此子公司信息] ${subCompanyName}`);\n    else\n        logger.success(`[已找到子公司信息] ${subCompanyName}`);\n    return result;\n}\n\n/**\n * 根据子公司选项获取所有子公司名称\n * \n * @param options 子公司选项\n */\nasync function searchSubCompanyNamesBySubInfo(options: ISubCompanyInfo, messageCallback: (msg: IMessage) => void): Promise<string[]> {\n    const list = await requestList('/search_company_name_by_sub_info', optionsConvert(options), messageCallback);\n    return list.map(v => v['公司名称']);\n}\n\n/**\n * 根据案号获取法律文书\n * \n * @param caseNum 案号\n * @returns 法律文书信息\n */\nasync function getLegalDocumentByCaseNum(caseNum: string, messageCallback: (msg: IMessage) => void): Promise<ILegalDocument|null> {\n    logger.info(`[正通过案号查询法律文书] ${caseNum}`);\n    const result = await requestObj('/get_legal_document', {\n        case_num: caseNum.trim().replace('（', '(').replace('）', ')')\n    }, messageCallback);\n    if(!result)\n        logger.error(`[未找到案号${caseNum}的法律文书]`);\n    else\n        logger.success(`[已找到案号${caseNum}的法律文书]`);\n    return result;\n}\n\n/**\n * 根据案由获取该案由的法律文书列表\n * \n * @param reason 案由\n * @returns 法律文书列表\n */\nasync function getLegalDocumentListByReason(reason: string, messageCallback: (msg: IMessage) => void): Promise<ILegalDocument[]> {\n    logger.info(`[正通过案由查询法律文书] ${reason}`);\n    const caseNums = await searchCaseNumByLegalDocument({\n        '案由': reason.trim()\n    }, messageCallback);\n    if(caseNums.length == 0) {\n        logger.error(`[未找到案由为${reason}的法律文书]`);\n        return [];\n    }\n    let docs = [];\n    let tasks = [];\n    while(docs.length != caseNums.length) {\n        const caseNum = caseNums[docs.length + tasks.length];\n        if(tasks.length < Math.min(LAW_API_CONCURRENT, caseNums.length - docs.length)) {\n            tasks.push(getLegalDocumentByCaseNum(caseNum, messageCallback));\n            continue\n        }\n        docs = docs.concat((await Promise.all(tasks)).filter(v => v));\n        tasks = [];\n    }\n    logger.success(`[已找到案由为${reason}的法律文书] ${docs.length}件`);\n    return docs;\n}\n\n/**\n * 根据原告，获取该原告的法律文书列表\n * \n * @param plaintiff 原告\n * @returns 法律文书列表\n */\nasync function getLegalDocumentListByPlaintiff(plaintiff: string, messageCallback: (msg: IMessage) => void): Promise<ILegalDocument[]> {\n    logger.info(`[正通过原告查询法律文书] ${plaintiff}`);\n    const caseNums = await searchCaseNumByLegalDocument({\n        '原告': plaintiff.trim()\n    }, messageCallback);\n    if(caseNums.length == 0) {\n        logger.error(`[未找到原告为${plaintiff}的法律文书]`);\n        return [];\n    }\n    let docs = [];\n    let tasks = [];\n    while(docs.length != caseNums.length) {\n        const caseNum = caseNums[docs.length + tasks.length];\n        if(tasks.length < Math.min(LAW_API_CONCURRENT, caseNums.length - docs.length)) {\n            tasks.push(getLegalDocumentByCaseNum(caseNum, messageCallback));\n            continue\n        }\n        docs = docs.concat((await Promise.all(tasks)).filter(v => v));\n        tasks = [];\n    }\n    logger.success(`[已找到原告为${plaintiff}的法律文书] ${docs.length}件`);\n    return docs;\n}\n\n/**\n * 根据被告，获取该被告的法律文书列表\n * \n * @param defendant 被告\n * @returns 法律文书列表\n */\nasync function getLegalDocumentListByDefendant(defendant: string, messageCallback: (msg: IMessage) => void): Promise<ILegalDocument[]> {\n    logger.info(`[正通过被告查询法律文书] ${defendant}`);\n    const caseNums = await searchCaseNumByLegalDocument({\n        '被告': defendant.trim()\n    }, messageCallback);\n    if(caseNums.length == 0) {\n        logger.error(`[未找到被告为${defendant}的法律文书]`);\n        return [];\n    }\n    let docs = [];\n    let tasks = [];\n    while(docs.length != caseNums.length) {\n        const caseNum = caseNums[docs.length + tasks.length];\n        if(tasks.length < Math.min(LAW_API_CONCURRENT, caseNums.length - docs.length)) {\n            tasks.push(getLegalDocumentByCaseNum(caseNum, messageCallback));\n            continue\n        }\n        docs = docs.concat((await Promise.all(tasks)).filter(v => v));\n        tasks = [];\n    }\n    logger.success(`[已找到被告为${defendant}的法律文书] ${docs.length}件`);\n    return docs;\n}\n\n/**\n * 根据法律文书某个字段是某个值来查询具体的案号\n * \n * @param options 法律文书选项\n * @returns 法律文书案号列表\n */\nasync function searchCaseNumByLegalDocument(options: ILegalDocument, messageCallback: (msg: IMessage) => void): Promise<string[]> {\n    const list = await requestList('/search_case_num_by_legal_document', optionsConvert(options), messageCallback);\n    return list.map(v => v['案号']);\n}\n\n/**\n * 选项转换\n * \n * @param options 选项\n */\nfunction optionsConvert(options: any) {\n    let _options: any = {};\n    for(let key in options) {\n        _options.key = key;\n        _options.value = options[key];\n    }\n    return _options;\n}\n\n/**\n * 请求对象\n * \n * @param url 接口路径\n * @param data 请求数据\n */\nasync function requestObj(url: string, data = {}, messageCallback: (msg: IMessage) => void): Promise<Record<string, string>> {\n    const result = await request(url, data, messageCallback);\n    if(_.isArray(result)) {\n        if(!result[0])\n            return null;\n        return result[0];\n    }\n    return result;\n}\n\n/**\n * 请求列表\n * \n * @param url 接口路径\n * @param data 请求数据\n */\nasync function requestList(url: string, data = {}, messageCallback: (msg: IMessage) => void): Promise<Record<string, string>[]> {\n    const result = await request(url, data, messageCallback);\n    if(_.isArray(result))\n        return result;\n    return [];\n}\n\n/**\n * 请求法律API\n * \n * @param url 接口路径\n * @param data 请求数据\n */\nasync function request(url: string, data = {}, messageCallback: (msg: IMessage) => void): Promise<Record<string, string>[]|Record<string, string>> {\n    console.log(`[调用接口] ${url} ${JSON.stringify(data)}`);\n    messageCallback({ type: MessageType.RequestAPI, title: '🌐 调用外部API', data: { method: 'POST', url, data } })\n    const result = await axios.request({\n        method: \"POST\",\n        url: `${LAW_API_ENDPOINT}${url}`,\n        data,\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${LAW_API_TOKEN}`\n        }\n    });\n    if(result.status != 200)\n        throw new Error(`Request failed: [${result.status}]${result.statusText || 'Unknown'}`);\n    messageCallback({ type: MessageType.RequestAPI, title: '🌐 调用外部API', data: result.data, finish: true })\n    return result.data;\n}\n\n/**\n * 网络检索API\n * \n * @param content \n */\nasync function webSearch(content: string) {\n    logger.info(`[正在网络检索] ${content}`);\n    const result = await axios.request({\n        method: \"POST\",\n        url: `${WEB_SEARCH_ENDPOINT}/chat/completions`,\n        data: {\n            model: WEB_SEARCH_MODEL,\n            messages: [\n                {\n                    \"role\": \"user\",\n                    \"content\": `请检索问题并提供完整答案：${content}`\n                }\n            ]\n        },\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${WEB_SEARCH_TOKEN}`\n        }\n    });\n    if(result.status != 200)\n        throw new Error(`Request failed: [${result.status}]${result.statusText || 'Unknown'}`);\n    if(!result.data || !result.data.choices || !result.data.choices[0])\n        throw new Error(`Request failed: [${result.data.code}]${result.data.message}`);\n    logger.success(`[完成网络检索] ${content}`);\n    return result.data.choices[0].message.content;\n}\n\nexport default {\n    getCompanyInfoByCompanyName,\n    getCompanyInfoByStockCode,\n    getCompanyInfoByRegisterCode,\n    getCompanyInfoListTextByIndustry,\n    getSubCompanyInfoListByCompanyName,\n    getSubCompanyInfoBySubCompanyName,\n    getLegalDocumentByCaseNum,\n    getLegalDocumentListByReason,\n    getLegalDocumentListByPlaintiff,\n    getLegalDocumentListByDefendant,\n    webSearch\n};","import _ from 'lodash';\n\nimport IMessage from \"./interfaces/IMessage.ts\";\nimport { MessageType } from \"@/lib/enums.ts\";\nimport ICompanyInfo from './interfaces/ICompanyInfo.ts';\nimport ICompanyRegister from './interfaces/ICompanyRegister.ts';\nimport ISubCompanyInfo from './interfaces/ISubCompanyInfo.ts';\nimport ILegalDocument from './interfaces/ILegalDocument.ts';\nimport api from './api.ts';\nimport logger from './logger.ts';\n\n// 可用工具\nconst TOOLS = {\n    getCompanyInfoTextByCompanyName,\n    getCompanyInfoTextByStockCode,\n    getCompanyInfoTextByRegisterCode,\n    getCompanyInfoListTextByIndustry,\n    getSubCompanyInfoListTextByCompanyName,\n    getSubCompanyInfoTextBySubCompanyName,\n    getParentCompanyInfoTextBySubCompanyName,\n    getLegalDocumentTextByCaseNum,\n    getLegalDocumentListTextByReason,\n    getLegalDocumentListTextByPlaintiff,\n    getLegalDocumentListTextByDefendant,\n    calculate\n};\n\n/**\n * 工具调用分发\n * \n * @param name 工具名称\n * @param args 参数对象\n */\nasync function toolCallDistribution(name: string, args: any = {}, messageCallback: (msg: IMessage) => void) {\n    logger.info(`[调用工具${name}]`, args)\n    if(Object.keys(args).length == 0) {\n        logger.error(`[调用工具${name}时未提供任何参数]`);\n        return `调用工具${name}必须提供合法的参数，请检查重试。`;\n    }\n    if(!TOOLS[name]) {\n        logger.error(`[未找到${name}工具]`);\n        return `工具${name}未找到，请检查工具名称重试。`;\n    }\n    const result = await TOOLS[name](args, messageCallback);\n    logger.success(`[工具${name}调用成功]`)\n    return result;\n}\n\n/**\n * 根据公司名称获取公司信息文本\n * \n * @returns 公司信息文本\n */\nasync function getCompanyInfoTextByCompanyName({ companyName }, messageCallback: (msg: IMessage) => void) {\n    let info = await api.getCompanyInfoByCompanyName(companyName, messageCallback);\n    if(!info)\n        return `未找到${companyName}的公司信息，请检查后重试。`;\n    info = companyInfoFilter(info, ['公司名称']);\n    let text = `已查找到${companyName}的公司信息：\\n\\n`;\n    for(let key in info)\n        text += `${key}：${info[key] || '无数据'}\\n`\n    text += `\\n以上信息不包含母公司信息，如需母公司信息可以调用getParentCompanyInfoTextBySubCompanyName工具获取。`;\n    return text;\n}\n\n/**\n * 根据股票代码获取公司信息文本\n * \n * @returns 公司信息文本\n */\nasync function getCompanyInfoTextByStockCode({ stockCode }, messageCallback: (msg: IMessage) => void) {\n    let info = await api.getCompanyInfoByStockCode(stockCode, messageCallback);\n    if(!info)\n        return `未找到公司代码（股票代码）为${stockCode}的公司信息，请检查后重试。`;\n    info = companyInfoFilter(info);\n    let text = `已查找到公司代码（股票代码）为${stockCode}的公司信息：\\n\\n`;\n    for(let key in info)\n        text += `${key}：${info[key] || '无数据'}\\n`\n    return text;\n}\n\n/**\n * 根据注册号获取公司信息文本\n *\n * @returns 公司信息文本\n */\nasync function getCompanyInfoTextByRegisterCode({ registerCode }, messageCallback: (msg: IMessage) => void) {\n    let info = await api.getCompanyInfoByRegisterCode(registerCode, messageCallback);\n    if(!info)\n        return `未找到注册号为${registerCode}的公司信息`;\n    info = companyInfoFilter(info, ['注册号']);\n    let text = `已查找到注册号为${registerCode}的公司信息：\\n\\n`;\n    for(let key in info)\n        text += `${key}：${info[key] || '无数据'}\\n`\n    return text;\n}\n\n/**\n * 根据所属行业名称获取公司信息列表文本\n * \n * @returns 公司信息列表文本\n */\nasync function getCompanyInfoListTextByIndustry({ industry }, messageCallback: (msg: IMessage) => void) {\n    const infos = await api.getCompanyInfoListTextByIndustry(industry, messageCallback);\n    if(!infos.length)\n        return `未找到归属行业为${industry}的公司信息列表，请检查后重试。`;\n    let text = '';\n    // let text = `已查找到归属行业为${industry}的公司信息列表（共${infos.length}家）：\\n\\n`;\n    infos.sort((a, b) => amountParse(b['注册资本']) - amountParse(a['注册资本']));\n    // for(let i = 0;i < infos.length;i++) {\n    //     const info = companyInfoFilter(infos[i], ['所属行业']);\n    //     text += `${i + 1}.${info['公司名称'] || '未知公司'}\\n`\n    //     delete info['公司名称'];\n    //     for(let key in info) {\n    //         if(key == '上市公司参股比例')\n    //             info[key] = info[key] ? `${parseInt(info[key])}%` : '无数据';\n    //         text += `   ${key}：${info[key] || '无数据'}\\n`\n    //     }\n    //     text += '\\n';\n    // }\n    text += `所属行业为${industry}的子公司共有${infos.length}家，注册资本前3的公司为：` + infos.slice(0, 3).map(v => `${v['公司名称']}（${v['注册资本'] ? v['注册资本'] + '万元' :'无数据'}）`).join('、');\n    return text;\n}\n\n/**\n * 根据母公司全称或股票简称获取所有子公司信息文本\n * \n * @returns 所有子公司信息文本\n */\nasync function getSubCompanyInfoListTextByCompanyName({ companyName, excessInvestmentAmount, isHolding, isWhollyOwned }, messageCallback: (msg: IMessage) => void) {\n    let infos = await api.getSubCompanyInfoListByCompanyName(companyName, messageCallback);\n    if(!infos.length)\n        return `未找到归属于${companyName}的子公司信息列表，也许你提供的是一家子公司名称，你可以尝试调用getParentCompanyInfoTextBySubCompanyName获取其母公司信息，请重试。`;\n    const totalCount = infos.length;\n    // 母公司向子公司的总投资金额\n    const totalInvestmentAmount = infos.reduce((total, v) => Math.ceil(total + amountParse(v['上市公司投资金额'])), 0)\n    // 子公司列表内容\n    const listContent = '| 公司名称 | 参股比例 | 投资金额 |\\n| --- | --- | --- |\\n' + infos.reduce((str, v) => str += `| ${v['公司名称']} | ${v['上市公司参股比例'] ? v['上市公司参股比例'] + '%' : '无数据'} | ${v['上市公司投资金额'] || '无数据'} |\\n`, '');\n    // 子公司最高参股比例\n    let maxShareholdingRatio = 0;\n    // 最高参股比例子公司名称列表\n    let maxShareholdingCompanyNames = [];\n    // 控股子公司列表（参股比例50%以上）\n    let holdingInfos = [];\n    if(isHolding) {\n        holdingInfos = infos.filter(v => {\n            const ratio = Number(v['上市公司参股比例']) || 0;\n            if(ratio > maxShareholdingRatio) {\n                maxShareholdingRatio = ratio;\n                maxShareholdingCompanyNames = []\n            }\n            if(ratio == maxShareholdingRatio)\n                maxShareholdingCompanyNames.push(v['公司名称']);\n            return ratio > 50;\n        });\n    }\n    // 全资子公司列表（参股比例100%）\n    let whollyOwnedInfos = [];\n    if(isWhollyOwned) {\n        whollyOwnedInfos = infos.filter(v => {\n            const ratio = Number(v['上市公司参股比例']) || 0;\n            return ratio == 100;\n        });\n    }\n    // 子公司最高投资金额\n    let maxInvestmentAmount = 0;\n    // 最高投资金额的子公司名称列表\n    let maxInvestmentAmountCompanyNames = [];\n    // 超出投资金额子公司列表（超过指定投资金额）\n    let excessInvestmentAmountInfos = [];\n    const _excessInvestmentAmount = amountParse(excessInvestmentAmount || '0');\n    const targetInfos = (isHolding ? holdingInfos : (isWhollyOwned ? whollyOwnedInfos : infos));\n    excessInvestmentAmountInfos = targetInfos.filter(v => {\n        const amount = amountParse(v['上市公司投资金额']);\n        if(amount > maxInvestmentAmount) {\n            maxInvestmentAmount = amount;\n            maxInvestmentAmountCompanyNames = []\n        }\n        if(amount == maxInvestmentAmount)\n            maxInvestmentAmountCompanyNames.push(v['公司名称']);\n        return amount > _excessInvestmentAmount;\n    });\n    return [\n        listContent,\n        `以上是${companyName}的子公司列表，共有${totalCount}家，投资的总金额为${totalInvestmentAmount}人民币;`,\n        `参股比例超过50%的${isHolding ? '控股' : ''}子公司有${holdingInfos.length}家` + (isWhollyOwned ? `，其中全资子公司有${whollyOwnedInfos.length}家;` : ';'),\n        excessInvestmentAmount ? `${isHolding || isWhollyOwned ? '其中，' : ''}投资金额超过${excessInvestmentAmount}的有${excessInvestmentAmountInfos.length}家;` : '',\n        `${isHolding ? '控股子公司中' : '子公司中'}参股比例最高的有：${maxShareholdingCompanyNames.join('、')}; 参股比例最高达到${maxShareholdingRatio.toFixed(2)}%;`,\n        `${isHolding ? '控股子公司中' : '子公司中'}投资金额最高的有：${maxInvestmentAmountCompanyNames.join('、')}; 投资金额最高达到${Math.ceil(maxInvestmentAmount)}人民币。`,\n    ].join('\\n')\n}\n\n/**\n * 根据子公司名称获取子公司信息文本\n * \n * @returns 子公司信息文本\n */\nasync function getSubCompanyInfoTextBySubCompanyName({ subCompanyName }, messageCallback: (msg: IMessage) => void) {\n    let info = await api.getSubCompanyInfoBySubCompanyName(subCompanyName, messageCallback);\n    if(!info)\n        return `未找到${subCompanyName}信息`;\n    info = subCompanyInfoFilter(info, ['公司名称']);\n    let text = `已查找到该${subCompanyName}信息：\\n\\n`;\n    for(let key in info)\n        text += `${key}：${info[key] || '无数据'}\\n`\n    return text;\n}\n\n/**\n * 根据子公司名称获取母公司信息文本\n * \n * @returns 子公司信息文本\n */\nasync function getParentCompanyInfoTextBySubCompanyName({ subCompanyName }, messageCallback: (msg: IMessage) => void) {\n    const info = await api.getSubCompanyInfoBySubCompanyName(subCompanyName, messageCallback);\n    if(!info)\n        return '未找到该子公司信息，无法获得关联母公司信息';\n    const parentCompanyName = info['关联上市公司全称'] || info['关联上市公司股票简称'];\n    let parentInfo = await api.getCompanyInfoByCompanyName(parentCompanyName, messageCallback);\n    parentInfo = companyInfoFilter(parentInfo);\n    let text = `已查找到${subCompanyName}的母公司信息：\\n\\n`;\n    for(let key in parentInfo)\n        text += `${key}：${parentInfo[key] || '无数据'}\\n`\n    text += `\\n${subCompanyName}是${parentInfo['公司名称']}的子公司`\n    return text;\n}\n\n/**\n * 根据案号获取法律文书内容文本\n *\n * @returns 法律文书内容文本\n */\nasync function getLegalDocumentTextByCaseNum({ caseNum }, messageCallback: (msg: IMessage) => void) {\n    let doc = await api.getLegalDocumentByCaseNum(caseNum, messageCallback);\n    if(!doc)\n        return `未找到案号为${caseNum}的历史法律文书，有可能缺失括号，请检查后重试。`;\n    doc = legalDocumentFilter(doc, ['案号']);\n    let text = `已查找到案号为${caseNum}的历史法律文书：\\n\\n`;\n    for(let key in doc)\n        text += `${key}：${doc[key] || '无数据'}\\n`\n    return text;\n}\n\n/**\n * 根据案由获取法律文书内容文本\n *\n * @returns 法律文书内容文本\n */\nasync function getLegalDocumentListTextByReason({ reason }, messageCallback: (msg: IMessage) => void) {\n    const docs = await api.getLegalDocumentListByReason(reason, messageCallback);\n    if (!docs.length)\n        return `未找到案由为${reason}的历史法律文书内容列表，可能为0件。`;\n    let text = `已查找到案由为${reason}的历史法律文书列表（共${docs.length}件）：\\n\\n`;\n    for (let i = 0; i < docs.length; i++) {\n        const doc = legalDocumentFilter(docs[i], ['案由']);\n        text += `${i + 1}.${doc['标题'] || '未知案件'}\\n`\n        delete doc['标题'];\n        for (let key in doc) {\n            text += `   ${key}：${doc[key] || '无数据'}\\n`\n        }\n        text += '\\n';\n    }\n    text += `\\n以上${docs.length}件法律文书案件的案由都是${reason}`\n    return text;\n}\n\n/**\n * 根据原告获取法律文书内容文本\n *\n * @returns 法律文书内容文本\n */\nasync function getLegalDocumentListTextByPlaintiff({ plaintiff }, messageCallback: (msg: IMessage) => void) {\n    const docs = await api.getLegalDocumentListByPlaintiff(plaintiff, messageCallback);\n    if (!docs.length)\n        return `未找到原告为${plaintiff}的历史法律文书内容列表，请检查后重试。`;\n    let text = `已查找到原告为${plaintiff}的历史法律文书内容列表（共${docs.length}件）：\\n\\n`;\n    const lawOfficeCounts = {};\n    for (let i = 0; i < docs.length; i++) {\n        const doc = legalDocumentFilter(docs[i], ['原告']);\n        text += `${i + 1}.${doc['标题'] || '未知案件'}\\n`\n        delete doc['标题'];\n        if(doc['原告律师']) {\n            // 提取律师事务所列表\n            const lawOffices = lawOfficesExtract(doc['原告律师']);\n            lawOffices.forEach(name => lawOfficeCounts[name] ? lawOfficeCounts[name]++ : (lawOfficeCounts[name] = 1));\n        }\n        for (let key in doc) {\n            text += `   ${key}：${doc[key] || '无数据'}\\n`\n        }\n        text += '\\n';\n    }\n    const lawOfficesDetail = Object.entries(lawOfficeCounts).reduce((str, v) => str + `${v[0]}：${v[1]}次\\n`, '');\n    text += `\\n${plaintiff}是以上${docs.length}件法律文书案件的原告。` + (lawOfficesDetail ? `\\n原告合作的事务所频次如下：\\n${lawOfficesDetail}。` : '原告没有和律师事务所合作，合作次数为0。')\n    return text;\n}\n\n/**\n * 根据被告获取法律文书内容文本\n *\n * @returns 法律文书内容文本\n */\nasync function getLegalDocumentListTextByDefendant({ defendant }, messageCallback: (msg: IMessage) => void) {\n    const docs = await api.getLegalDocumentListByDefendant(defendant, messageCallback);\n    if (!docs)\n        return `未找到被告为${defendant}的法律文书，请检查后重试。`;\n    if (!docs.length)\n        return `未找到被告为${defendant}的历史法律文书内容列表，请检查后重试。`;\n    let text = `已查找到被告为${defendant}的历史法律文书内容列表（共${docs.length}件）：\\n\\n`;\n    const lawOfficeCounts = {};\n    for (let i = 0; i < docs.length; i++) {\n        const doc = legalDocumentFilter(docs[i], ['被告']);\n        text += `${i + 1}.${doc['标题'] || '未知案件'}\\n`\n        delete doc['标题'];\n        if(doc['被告律师']) {\n            // 提取律师事务所列表\n            const lawOffices = lawOfficesExtract(doc['被告律师']);\n            lawOffices.forEach(name => lawOfficeCounts[name] ? lawOfficeCounts[name]++ : (lawOfficeCounts[name] = 1));\n        }\n        for (let key in doc) {\n            text += `   ${key}：${doc[key] || '无数据'}\\n`\n        }\n        text += '\\n';\n    }\n    const lawOfficesDetail = Object.entries(lawOfficeCounts).reduce((str, v) => str + `${v[0]}：${v[1]}次\\n`, '');\n    text += `\\n${defendant}是以上${docs.length}件法律文书案件的被告。` + (lawOfficesDetail ? `\\nb被告合作的事务所频次如下：\\n${lawOfficesDetail}。` : '被告没有和律师事务所合作，合作次数为0。');\n    return text;\n}\n\n/**\n * 公司基本信息清理，减少与任务无关的干扰信息\n * \n * @param info 公司基本信息对象\n * @param fields 扩展过滤字段列表\n */\nfunction companyInfoFilter(info: ICompanyInfo, fields: string[] = []) {\n    info = _.omit(info, [\n        '关联证券',\n        '公司代码',\n        '所属市场',\n        '官方网址',\n        '入选指数',\n        '经营范围',\n        '机构简介',\n        '每股面值',\n        ...fields\n    ]);\n    return companyRegisterFilter(info);\n}\n\n/**\n * 公司注册信息清理，减少与任务无关的干扰信息\n * \n * @param register 公司注册信息对象\n * @param fields 扩展过滤字段列表\n */\nfunction companyRegisterFilter(register: ICompanyRegister, fields: string[] = []) {\n    return _.omit(register, [\n        '参保人数',\n        '省份',\n        '城市',\n        '区县',\n        ...fields\n    ]);\n}\n\n/**\n * 子公司基本信息清理，减少与任务无关的干扰信息\n * \n * @param info 子公司基本信息对象\n * @param fields 扩展过滤字段列表\n */\nfunction subCompanyInfoFilter(info: ISubCompanyInfo, fields: string[] = []) {\n    info['母公司参股比例'] = info['上市公司参股比例'];\n    info['母公司投资金额'] = info['上市公司投资金额'];\n    return _.omit(info, [\n        '关联上市公司股票代码',\n        '上市公司关系',\n        '上市公司参股比例',\n        '上市公司投资金额',\n        ...fields\n    ]);\n}\n\n/**\n * 法律文书内容清理，减少与任务无关的干扰信息\n * \n * @param doc 法律文书对象对象\n * @param fields 扩展过滤字段列表\n */\nfunction legalDocumentFilter(doc: ILegalDocument, fields: string[] = []) {\n    return _.omit(doc, [\n        '文书类型',\n        '文件名',\n        '判决结果',\n        ...fields\n    ]);\n}\n\n/**\n * 金额转换为数字\n * \n * @param text 内容\n */\nfunction amountParse(text: string) {\n    if(!text)\n        return 0;\n    if(_.isFinite(text))\n        return Number(text);\n    text = text.replace(/\\>|\\<|\\=|\\,|\\，/g, '');\n    let times = 1;\n    if(text.includes('亿'))\n        times = 100000000;\n    else if(text.includes('千万'))\n        times = 10000000;\n    else if(text.includes('万'))\n        times = 10000;\n    return parseFloat(text) * times;\n}\n\n/**\n * 律师事务所提取\n * \n * @param text 内容\n */\nfunction lawOfficesExtract(text: string) {\n    const match = text.match(/,(.+?律师事务所)/g);\n    if(!match)\n        return [];\n    return match.map(v => v.replace(/^,\\s*/, '').trim());\n}\n\nfunction calculate({ nums }) {\n    console.log(nums);\n    return nums.reduce((total, num) => total + amountParse(num), 0);\n}\n\nexport default {\n    toolCallDistribution,\n    ...TOOLS\n}","import OpenAI from 'openai';\nimport _ from 'lodash';\n\nimport config from './config.ts';\nimport logger from './logger.ts';\n\nconst MODEL = config.zhipuai.model || 'glm-4-0520';\nconst ENDPOINT = config.zhipuai.endpoint;\nconst API_KEY = config.zhipuai.api_key;\nconst MAX_TOKENS = config.zhipuai.max_tokens;\n\nconst client = new OpenAI({\n    baseURL: ENDPOINT,\n    apiKey: API_KEY\n})\n\n/**\n * 问题分类\n */\nasync function questionClassify(question: string, categorys: any[], usageCallback?: (tokens: number) => void) {\n    logger.info(`[正在分类问题] ${question}`);\n    const categorysDescription = categorys.reduce((str, v) => str + `${v[0]}：${v[1]}\\n`, '');\n    const result = await chatCompletions([\n        {\n            \"role\": \"system\",\n            \"content\": `你是一个法律问题分类助手，需要根据用户输入判断它属于以下哪一个分类：\\n${categorysDescription}\\n请直接输出分类名称，不需要解释。\\n通常只需要一个分类，除非问题明确涉及多个分类才提供多个，请使用英文逗号隔开它们。`\n            // \"content\": `你是一个法律问题分类助手，需要根据用户输入判断它属于以下哪一个分类，如果问题明确涉及多个分类请使用英文逗号隔开：\\n[${categorys.join(',')}]`\n        },\n        {\n            \"role\": \"user\",\n            \"content\": `问题：${question}\\n\\n分类：`\n        \n        }\n    ], usageCallback);\n    const choices = [];\n    for(let v of categorys) {\n        if(result.includes(v[0]))\n            choices.push(v[0]);\n    }\n    if(choices.length == 0)\n        logger.error(`[此问题无法判断分类] ${question}`);\n    else\n        logger.success(`[问题分类完成] ${choices.join('、')}`);\n    return choices;\n}\n\n/**\n * 咨询法律概念\n * \n * @param question 问题内容\n */\nasync function consultingLegalConcept(question: string, history: OpenAI.ChatCompletionToolMessageParam[] = [], afterContent = '', usageCallback?: (tokens: number) => void) {\n    logger.info(`[正在咨询法律条文] ${question}`);\n    const result = await toolCalls([\n        {\n            \"role\": \"system\",\n            \"content\": `你是一个法律条文答题助手，需要根据用户提供的问题，精确完整的提供一份标准的答案，不需要输出提示语和注意事项，任何题目都需要作答，如果数据为0也请如实回答。`\n        },\n        ...history,\n        {\n            \"role\": \"user\",\n            \"content\": `请精确完整的回答此问题：${question}\\n${afterContent}\\n\\n答案：`\n        }\n    ], [], usageCallback);\n    logger.success(`[法律条文咨询完成]`);\n    return result;\n}\n\n/**\n * 咨询公司信息\n * \n * @param question 问题内容\n */\nasync function consultingCompanyInfo(question: string, history: OpenAI.ChatCompletionToolMessageParam[] = [], afterContent = '', disableToolNames: string[] = [], usageCallback?: (tokens: number) => void) {\n    logger.info(`[正在咨询公司信息] ${question}`);\n    const result = await toolCalls([\n        {\n            \"role\": \"system\",\n            \"content\": `你是一个公司信息答题助手，你能够调用工具查询一家或多家公司的基本信息、注册信息、行业信息、子公司信息、子公司的母公司信息等来精准完整的提供你的答案。\\n不需要输出提示语和注意事项。`\n        },\n        ...history,\n        {\n            \"role\": \"user\",\n            \"content\": `\\n请精确完整的回答此问题：${question}\\n\\n如果上文存在未查询到的数据你可以继续调用工具\\n${afterContent}\\n\\n答案：`\n        }\n    ], [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getCompanyInfoTextByCompanyName\",\n                \"description\": \"根据提供的公司名称或简称或英文名称，查询该公司的基本信息和注册信息\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"companyName\": {\n                            \"type\": \"string\",\n                            \"description\": \"公司名称或简称或英文名称\",\n                        }\n                    },\n                    \"required\": [\"companyName\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getCompanyInfoTextByRegisterCode\",\n                \"description\": \"根据提供的公司注册号，查询该公司的基本信息和注册信息\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"registerCode\": {\n                            \"type\": \"string\",\n                            \"description\": \"公司注册号\",\n                        }\n                    },\n                    \"required\": [\"registerCode\"],\n                },\n            }\n        },\n        // {\n        //     \"type\": \"function\",\n        //     \"function\": {\n        //         \"name\": \"getCompanyInfoTextByStockCode\",\n        //         \"description\": \"根据提供的公司代码（股票代码）查询该公司的基本信息和注册信息\",\n        //         \"parameters\": {\n        //             \"type\": \"object\",\n        //             \"properties\": {\n        //                 \"stockCode\": {\n        //                     \"type\": \"string\",\n        //                     \"description\": \"公司代码（股票代码）\",\n        //                 }\n        //             },\n        //             \"required\": [\"stockCode\"],\n        //         },\n        //     }\n        // },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getCompanyInfoListTextByIndustry\",\n                \"description\": \"查询所属该行业的公司列表，根据提供的行业名称，可以获得包含每家公司的基本信息和注册信息列表\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"industry\": {\n                            \"type\": \"string\",\n                            \"description\": \"行业名称\",\n                        }\n                    },\n                    \"required\": [\"industry\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getParentCompanyInfoTextBySubCompanyName\",\n                \"description\": \"查询母公司的信息，根据提供的子公司名称查询母公司或控股公司的公司信息，方便获取子公司属于哪个公司旗下。\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"subCompanyName\": {\n                            \"type\": \"string\",\n                            \"description\": \"子公司名称\",\n                        }\n                    },\n                    \"required\": [\"subCompanyName\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getSubCompanyInfoListTextByCompanyName\",\n                \"description\": \"查询子公司信息列表，根据提供的公司名称或简称或英文名称，可以获得该公司的所有子公司信息列表\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"companyName\": {\n                            \"type\": \"string\",\n                            \"description\": \"公司名称\",\n                        },\n                        \"excessInvestmentAmount\": {\n                            \"type\": \"string\",\n                            \"description\": \"母公司投资子公司超过的金额，包含单位（如5000万）\"\n                        },\n                        \"isHolding\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"是否查询控股公司（参股比例超过50%的公司）\"\n                        },\n                        \"isWhollyOwned\": {\n                            \"type\": \"boolean\",\n                            \"description\": \"是否查询全资子公司（参股比例为100%的公司）\"\n                        }\n                    },\n                    \"required\": [\"companyName\", \"isHolding\", \"isWhollyOwned\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getSubCompanyInfoTextBySubCompanyName\",\n                \"description\": \"根据子公司名称查询子公司的信息，可以查询子公司关联的母公司名称和母公司对该子公司的投资金额、参股比例、控股情况等\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"subCompanyName\": {\n                            \"type\": \"string\",\n                            \"description\": \"子公司名称\",\n                        }\n                    },\n                    \"required\": [\"subCompanyName\"],\n                },\n            }\n        },\n        // {\n        //     \"type\": \"function\",\n        //     \"function\": {\n        //         \"name\": \"calculate\",\n        //         \"description\": \"加法计算器，可用于统计总投资金额，单位是元。\",\n        //         \"parameters\": {\n        //             \"type\": \"object\",\n        //             \"properties\": {\n        //                 \"nums\": {\n        //                     \"type\": \"array\",\n        //                     \"description\": \"金额列表\",\n        //                 }\n        //             },\n        //             \"required\": [\"nums\"],\n        //         },\n        //     }\n        // }\n    ].filter(f => !disableToolNames.includes(f.function.name)) as OpenAI.Chat.Completions.ChatCompletionTool[], usageCallback);\n    logger.success(`[公司信息咨询完成]`);\n    return result;\n}\n\n/**\n * 咨询法律文书\n * \n * @param question 问题内容\n */\nasync function consultingLegalDocument(question: string, history: OpenAI.ChatCompletionToolMessageParam[] = [], afterContent = '', disableToolNames: string[] = [], usageCallback?: (tokens: number) => void) {\n    logger.info(`[正在咨询法律文书] ${question}`);\n    const result = await toolCalls([\n        {\n            \"role\": \"system\",\n            \"content\": `你是一个法律文书答题助手，你能够调用工具根据案号等信息查询相应法律文书的内容或判决的法律条文依据等，并根据题目要求，精确完整的提供一份标准的答案，不需要输出提示语和注意事项。`\n        },\n        ...history,\n        {\n            \"role\": \"user\",\n            \"content\": `\\n请精确完整的回答此问题：${question}\\n\\n如果上文存在未查询到的数据你可以继续调用工具\\n${afterContent}\\n\\n答案：`\n        }\n    ], [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getLegalDocumentTextByCaseNum\",\n                \"description\": \"根据提供的案号查询该法律文书或查询判决的法律条文依据\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"caseNum\": {\n                            \"type\": \"string\",\n                            \"description\": \"案号\",\n                        }\n                    },\n                    \"required\": [\"caseNum\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getLegalDocumentListTextByReason\",\n                \"description\": \"根据提供的案由，查询该案由的法律文书列表\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"reason\": {\n                            \"type\": \"string\",\n                            \"description\": \"案由\",\n                        }\n                    },\n                    \"required\": [\"reason\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getLegalDocumentListTextByPlaintiff\",\n                \"description\": \"根据提供的原告，查询出现该原告的法律文书列表，面临诉讼时公司将是原告\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"plaintiff\": {\n                            \"type\": \"string\",\n                            \"description\": \"原告名称\",\n                        }\n                    },\n                    \"required\": [\"plaintiff\"],\n                },\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"getLegalDocumentListTextByDefendant\",\n                \"description\": \"根据提供的被告，查询出现该被告的法律文书列表\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"defendant\": {\n                            \"type\": \"string\",\n                            \"description\": \"被告名称\",\n                        }\n                    },\n                    \"required\": [\"defendant\"],\n                },\n            }\n        }\n    ].filter(f => !disableToolNames.includes(f.function.name)) as OpenAI.Chat.Completions.ChatCompletionTool[], usageCallback);\n    logger.success(`[法律文书咨询完成]`);\n    return result;\n}\n\n/**\n * 检查任务是否完成\n * \n * @param question 问题内容\n * @param answer 答案内容\n */\nasync function checkTaskCompleted(question: string, answer: string, history: OpenAI.ChatCompletionToolMessageParam[] = [], rounds: number, usageCallback?: (tokens: number) => void) {\n    if(!answer)\n        return { completed: false, explain: '' }\n    logger.info(`[正在检查任务是否已完成] 第${rounds}轮`);\n    const result = await chatCompletions([\n        ...history,\n        {\n            \"role\": \"user\",\n            \"content\": `问题：帮我查一下健帆生物科技集团股份有限公司的行业归属，并告知该行业内的企业总数是多少？\\n回答：健帆生物科技集团股份有限公司的行业归属是专用设备制造业，该行业内的企业总数为62家。\\n\\n完整度：100%\\n已完成：yes\\n待补充信息：无\\n\\n以上是任务检查样例。\\n\\n你是一个任务完成状态检查助手，你不需要关注答案正确率，仅从答题完整性入手，你会先评估并输出一个完整度，当完整度高于50%时再是否完成位置输出“yes”，否则在是否完成位置输出“no”并在待补充信息位置提供答案缺失的信息。\\n\\n示例输出：\\n完整度：{完整度}\\n已完成：{是否完成}\\n待补充信息：{待补充信息或无}\\n\\n，只需关注是否有某些数据没有查询到或数值不明确。\\n\\n问题：${question}。\\n回答：${answer}。`\n        }\n    ], usageCallback, 'glm-4-0520');\n    const completed = result.toLowerCase().includes('yes');\n    completed ? logger.success(`[任务已完成] 第${rounds}轮`) : logger.warn(`[任务未完成，即将重试] 第${rounds}轮`);\n    return {\n        completed,\n        explain: result\n    };\n}\n\n/**\n * 信息抽取\n * \n * @param question 问题内容\n * @param content 数据内容\n */\nasync function infoExtract(question: string, content: string, usageCallback?: (tokens: number) => void) {\n    logger.info('[正在抽取信息]');\n    let result = await chatCompletions([\n        {\n            \"role\": \"system\",\n            \"content\": \"你是一个参考内容关键信息提取助手，你的目标是提取和题目相关的信息但不改写不缩写信息内容。\\n从提供的参考内容中提取与题目相关的信息并完整列出，你不需要回答题目，不能缺失题目需要的关键信息。\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": `${content}\\n\\n以上为参考内容。\\n\\n题目：${question}。\\n\\n注意，你不需要回答题目，提取到的信息（如果部分信息未找到无需列出）：\\n`\n        }\n    ], usageCallback);\n    return result;\n}\n\n/**\n * 答案整理复述\n * \n * @param question 问题内容\n * @param answer 答案内容\n */\nasync function answerRephrase(question: string, answer: string, usageCallback?: (tokens: number) => void) {\n    logger.info('[正在总结复述答案]');\n    let result = await chatCompletions([\n        {\n            \"role\": \"system\",\n            \"content\": \"Q: 我想了解重庆莱美药业股份有限公司的注册状况、企业类别以及成立日期。\\nA: 重庆莱美药业股份有限公司的注册状况为存续，企业类别是股份有限公司（上市公司），成立日期为1999年09月06日。\\n\\nQ: 我想了解06865 福莱特玻璃这个股票代码的上市公司信息，可以提供公司的英文名称吗？\\nA: 06865 福莱特玻璃股票代码的上市公司的英文名称是Flat Glass Group Co., Ltd.。\\n\\nQ: 我想了解化学原料和化学制品制造业这个行业的公司有哪些，请列出注册资本最大的3家头部公司，并给出他们的具体注册资本数额\\nA: 在化学原料和化学制品制造业行业中，头部的3家公司分别是浙江龙盛集团股份有限公司, 阳煤化工股份有限公司, 北京海新能源科技股份有限公司，它们的注册资本分别为325333.186, 237598.1952, 234972.0302。\\n\\nQ: 上海家化联合股份有限公司为原告时他主要和哪家律师事务所合作?合作次数为几次。\\nA: 上海家化联合股份有限公司主要和浙江若屈律师事务所律师合作，合作了11次。\\n\\n参考以上对话例子中Answer的回复风格, 重新复述(rephrase)以下问答中的A，注意:\\n- 回答简要切题, 输出一行回答不换行，使用中文\\n- 问题涉及的名词、关键词、英文、数字要完整填写，不缩写不改写信息，不能遗漏关键信息\\n- 复述部分问题内容等\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": `Q：${question}。\\nA：${answer}（完整复述和列出内容）。\\n\\n直接提供答案完整复述，不缩写不改写，不允许省略公司名称等信息。以下是复述：`\n        }\n    ], usageCallback);\n    result = result.replace(/Q(:|：).+\\n*A(:|：)\\s?/, '').replace(/A(:|：)\\s?/, '').replace(/写\\n/, '').replace(/^(,|，)/, '');\n    return result;\n}\n\n/**\n * 日常沟通交流\n * \n * @param question 问题内容\n */\nasync function communication(question: string, usageCallback?: (tokens: number) => void) {\n    logger.info('[正在日常沟通交流]');\n    const result = await chatCompletions([\n        {\n            \"role\": \"system\",\n            \"content\": \"你是一个专业的法律助手，名字是GLM法律顾问，需要严谨可靠的回答用户的任何问题。\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": question\n        }\n    ], usageCallback);\n    return result;\n}\n\nasync function chatCompletions(messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[], usageCallback?: (tokens: number) => void, model?: string) {\n    const response = await client.chat.completions.create({\n        model: model || MODEL,\n        messages,\n        tools: [\n            {\n                \"type\": \"web_search\",\n                \"web_search\": {\n                    \"enable\": false\n                }\n            } as any\n        ],\n        tool_choice: \"auto\",\n        max_tokens: MAX_TOKENS\n    });\n    if(!response.choices || !response.choices[0])\n        throw new Error('LLM response error');\n    if(usageCallback && response.usage && _.isFinite(response.usage.total_tokens))\n        usageCallback(response.usage.total_tokens);\n    return response.choices[0].message.content;\n}\n\nasync function toolCalls(messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[], tools: OpenAI.Chat.Completions.ChatCompletionTool[] = [], usageCallback?: (tokens: number) => void, model?: string) {\n    tools.push({\n        \"type\": \"web_search\",\n        \"web_search\": {\n            \"enable\": false\n        }\n    } as any)\n    const response = await client.chat.completions.create({\n        model: model || MODEL,\n        messages,\n        tools,\n        tool_choice: \"auto\",\n        max_tokens: MAX_TOKENS\n    });\n    if(!response.choices || !response.choices[0])\n        throw new Error('LLM response error');\n    if(usageCallback && response.usage && _.isFinite(response.usage.total_tokens))\n        usageCallback(response.usage.total_tokens);\n    const callResults = response.choices[0].message.tool_calls || [];\n    return {\n        content: response.choices[0].message.content || null,\n        calls: callResults.filter(v => v.type == 'function').map(v => {\n            const { id, function: _function } = v;\n            const { name, arguments: argsJson } = _function;\n            const args = _.attempt(() => JSON.parse(argsJson));\n            return {\n                id,\n                name,\n                args: !_.isError(args) ? args : {}\n            };\n        })\n    }\n}\n\nexport default {\n    questionClassify,\n    consultingLegalConcept,\n    consultingCompanyInfo,\n    consultingLegalDocument,\n    infoExtract,\n    checkTaskCompleted,\n    answerRephrase,\n    communication\n};","import path from 'path';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\n\nimport Response from '@/lib/response/Response.ts';\nimport question from \"./question.ts\";\n\nexport default [\n    {\n        get: {\n            \"/\": async () => {\n                return new Response(\"Redirect to index page\", { redirect: \"/index.html\" });\n            },\n            \"/(.*)\": async request => {\n                let _path = request.params[0];\n                if (!_.isString(_path))\n                    return new Response('not found', {\n                        type: 'html',\n                        statusCode: 404\n                    });\n                const ext = path.extname(_path).substring(1);\n                const filePath = path.join(\"public/\", _path);\n                if (!await fs.pathExists(filePath) || !(await fs.stat(filePath)).isFile()) {\n                    return new Response('not found', {\n                        type: 'html',\n                        statusCode: 404\n                    });\n                }\n                const { size: fileSize } = await fs.promises.stat(filePath);\n                const readStream = fs.createReadStream(filePath);\n                return new Response(readStream, {\n                    type: ext || \"txt\",\n                    headers: {\n                        \"Cache-Control\": \"max-age=31536000\"  //对页面资源缓存设置一年有效期\n                    },\n                    size: fileSize\n                });\n            }\n        }\n    },\n    question\n];","import { PassThrough } from \"stream\";\nimport question from \"@/lib/question.ts\";\nimport logger from \"@/lib/logger.ts\";\n\nasync function generateQuestionAnswerStream(query: string) {\n    const transStream = new PassThrough();\n    question.generateQuestionAnswer(query, msg => {\n        // console.log(msg);\n        transStream.write(`${JSON.stringify(msg)}\\n\\n`);\n    })\n        .then(() => {\n            transStream.end();\n        })\n        .catch(err => {\n            logger.error(err);\n            transStream.end();\n        });\n    return transStream;\n}\n\nexport default {\n    generateQuestionAnswerStream\n}","import _ from \"lodash\";\n\nimport Request from \"@/lib/request/Request.ts\";\nimport Response from \"@/lib/response/Response.ts\";\nimport question from \"@/api/controllers/question.ts\";\n\nexport default {\n  prefix: \"/question\",\n\n  post: {\n  \n    \"/generate_answer\": async (request: Request) => {\n      request\n        .validate('body.query');\n      const { query } = request.body;\n      const stream = await question.generateQuestionAnswerStream(query);\n      return new Response(stream, {\n        type: \"text/event-stream\"\n      });\n    }\n\n  },\n};\n"],"mappings":"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","names":["import_fs_extra","fs","yaml","fs","path","dateFormat","_util","_","_","import_lodash","import_lodash","assert","_","import_lodash","import_path","import_colors","import_fs_extra","import_date_fns","import_lodash","_","uuid","randomstring","mime","path","dateFormat","os","fs","crypto","axios","_","import_mime","import_lodash","import_lodash","_","_","mime","import_lodash","exceptions_default","_","exceptions_default","Koa","koaCors","koaRange","KoaRouter","koaBody","_","request","exceptions_default","response","err","import_fs_extra","import_lodash","import_axios","import_lodash","_","axios","import_lodash","getCompanyInfoListTextByIndustry","_","import_lodash","OpenAI","_","fs","_","import_path","import_fs_extra","import_lodash","import_stream","question_default","question_default","request","request","_","path","fs","question_default","minimist"]}