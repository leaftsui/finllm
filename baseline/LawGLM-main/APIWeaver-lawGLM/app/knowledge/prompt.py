from knowledge.api_info import TABLE_DESC, APIS2

TOOLS = '''
# 过滤legal_docs文档，需要输入/get_legal_document_list后的结果。
def filter_legal_docs(legal_documents_result, filter_dict):
    """
    过滤法律文档信息
    根据指定的过滤条件，从法律文档列表中过滤出符合条件的文档。案号格式为：(+收案年度+)+法院代字+类型代字+案件编号+号。
    参数:
    legal_documents_result (list[dict]): 通过 get_legal_document_list 接口获得的法律文档列表。
    param filter_dict (dict): 包含过滤条件的字典
        - 案由 (str): 案件的案由，支持模糊匹配，但是必须是关键词例如:劳务纠纷,债权纠纷，侵害商标权纠纷。
        - 年份 (str): 案件的年份，例如 '2019'。
        - 年份类型 (str): 年份的类型，可以是 '立案日期'、'起诉日期' 或 '审理日期'。
        - 审理省份: (str) 案件审理的省份，注意是简称，例如 安徽省->皖 四川->川
        - 案件类型 (str): 案件类型，可以是 ['民', '民初', '民终', '执','民申'] 之一。
            - '民': 民事诉讼
            - '民初': 民事诉讼初审
            - '民终': 民事诉讼终审
            - '民申': 民事申诉案件
            - '执': 执行案件
        - 原告 (str): 案件的原告。
        - 被告 (str): 案件的被告。
        - 最小涉案金额 (str): 案件的最小涉案金额，支持 1亿，10万这种描述,涉案金额不为0的填“0”
        - 最大涉案金额 (str): 案件的最大涉案金额，支持 1亿，10万这种描述
        - 法院代字(str): 审理法院的代字，用来过滤审理法院,法院代字为省份简称+代字如果是高级法院只有省份简称，例如`粤1973`,`京`。
        注意：字段只有在需要的时候才存在，例如筛选2019年的执行案件只需要{'年份':'2019','年份类型':'立案日期','案件类型':'执'}。
        返回:
            list[dict]: 包含符合条件的法律文档信息的列表。
        """
    # 实现略
 

# 子公司过滤辅助函数，可以找到符合要求的子公司
def filter_sub_company(sub_company_list, filter_dict):
    """
    过滤子公司信息，如果是获取全部子公司，无需使用此函数。
    :param sub_company_list:  /get_sub_company_info_list 返回的结果
    :param filter_dict: dict 包含过滤参数的字典
        - 最小投资金额: str 最小上市公司投资金额（例如 "1亿", "500万"）默认为 -1
        - 最大投资金额: str 最大上市公司投资金额（例如 "1亿", "500万"）默认为inf
        - 最小持股比例: str|int 最小上市公司参股比例，支持 0-100 的百分制，默认为0
        - 最大持股比例: str|int 最大上市公司参股比例，支持 0-100 的百分制，默认为100
        注意：字段只有在需要的时候才存在，例如筛选全资子公司只需要:{'最小持股比例':100}，没有其他字段。
            特别的，最小上市公司投资金额为大于，其余都包含等于，例如：{'最小上市公司投资金额':0} 会筛选大于0的
    :return: list[dict] 包含符合条件的子公司信息的列表，每个子公司信息以字典形式表示
    """
    # 实现略


# /get_xzgxf_info_list
# 限制高消费过滤函数，可以找到符合要求的限制高消费信息
def filter_xzgxf_info_list(xzgxf_info_list, filter_dict):
    """
    过滤限制高消费信息列表
    :param xzgxf_info_list: list[dict] 包含行政限高信息的列表
    :param filter_dict: dict 包含过滤条件的字典
        - 审理省份: str 案件审理的省份，注意是简称，例如 安徽省->皖 四川->川
        - 立案时间: str 案件的立案时间年份，例如 '2019'
        - 限高发布日期: str 限高的发布日期年份，例如 '2019'
        - 最小涉案金额: str 默认 "-1" 采用的是大于 例如 输入 ”0“ 则筛选涉案金额大于0，支持 "1万"，”1亿“，不支持汉字的 ”一万“
        - 最大涉案金额: str 默认 "inf" 采用的是小于
    注意：字段只有在需要的时候才存在，例如筛选2020年再安徽立案的案件只需要：{'立案时间':'2020','审理省份':'皖'}
    :return: list[dict] 包含符合条件的行政限高信息的列表
    """
    # 实现略

# 根据`案号`获取：["法院名称", "行政级别", "法院级别", "法院代字", "区划代码","级别"]等基础信息，主要用于获取法院名称和筛选法院级别，不可以获取法院地点，负责人，官网等。
def get_court_code_by_case_number(param):
    """
    根据案号查询法院信息："法院名称", "行政级别", "法院级别", "法院代字", "区划代码","级别"
    其中案号格式为：(+收案年度+)+法院代字+类型代字+案件编号+号
    :param param: {'query_conds': {'案号': 'str'}, "need_fields": []}
    :return:dict 包含 ["法院名称", "行政级别", "法院级别", "法院代字", "区划代码","级别"]
    """
    # 实现略
    
# 根据案号列表，获取法院级别排序用于获取最高级别法院
def sort_court_level(case_num_list,level_type='法院级别'):
    """
    :param case_num_list: list[dict] or list 案号列表或者 [{"案号":str}],可以直接传入接口结果
    :param level_type: 法院级别 或者 行政级别
    :return:List[Dict['案号','法院名称']] 排序后的结果
    """
'''

plan = """
# 以下为数据表：
{}
-----
# 以下是API表
{}
注意：need_fields字段为对应表格属性，不可省略，填[]获取所有字段
-----
# 以下是辅助函数
{}

备注：以上辅助函数有关过滤的部分需要注意，不是所有题目都需要过滤，如果题目中没有明确的过滤需求，如获取所有子公司，获取所有案件信息，无需过滤
-----
用户会给你一个问题，你会结合数据表，将用户的问题转化为一连串的查询计算问题，
查询工具使用的只有python调用上面的API
然后你会给用户一个执行规划，规划如何使用API完成上面的问题，
最后返回json格式的执行规划。

# 注意事项：
1.只考虑能使用API进行操作的查询,并使用尽量少的查询步骤。
2.根据用户提供的数据，不要编造示例数据。
3.给出具体的操作流程，每一个流程目标明确，但是方法应该包含多种选择。
4.接口没有过滤功能，过滤操作为先获取全量数据，然后使用辅助函数，注意使用辅助函数时，请仔细阅读 function doc，参数应该保持最少原则。
5.排序，求和，找第几的为计算操作，使用 /sum /rank 接口

一般常用的解题路径为：
公司简称/统一社会信用代码/公司代码 -> 公司名称 -> LegalDoc.关联公司/XzgxfInfo.限制高消费企业名称 -> 过滤筛选等操作 -> 案号及案件信息列表 -> 计算操作
案号 -> 法院名称 -> 法院级别/官网/地址
案号 -> 原告/被告/原告律师事务所/被告律师事务所/审理法院/执行法院(XzgxfInfo) -> 获取所在实体表中地址 -> 区划代码/天气(获取天气不要忘记获取日期)
公司简称/统一社会信用代码 -> 公司全称 -> 子公司信息
子公司名称 -> 母公司名称(关联上市公司全称) -> 对母公司进行各种操作
子公司名称 -> SubCompanyInfo -> 计算被投资总额（投资额度➗控股比例）

请按照以下格式提供输出：
推理流程：
```md
[分析解题目标，明确题目需求]
[分析解题路径，需要说出是用第几步的结果，参考解题路径]
[分析参数，用户提供的问题中的实体每对应哪张表的哪个字段，输入参数，结果参数，中间参数是什么]
```
执行步骤：
```json
[
 {{"step":1,"goal":"xxx","type":"查询/计算/过滤/统计/列举","suggestion"："xxx","table_name":"xxx","is_necessary": "necessary/unnecessary","base_on_step":[int]}},
 {{"step":2,"goal":"xxx","type":"查询/计算/过滤/统计/列举","suggestion"："xxx","table_name":"xxx","is_necessary": "necessary/unnecessary","base_on_step":[int]}}
  ...
]
```
注意：1.step为当前步骤，为1，2，3递增，请确保输出正确的json格式，步骤应该互相独立。
     2.[查询/计算/过滤]不能混在一个步骤，例如过滤后求和，应该有过滤和计算两个步骤。
     3.base_on_step:这一步的输入是基于哪几步的结果，填0表示基于题目本身。
     4./get_sum 不能统计数量，统计数量 直接用 len(之前的结果)

以下是一个示例:
{}
请仿照示例回答
"""

execute = """
# 以下是 API表
{}
-----


请你在用户的引导下完成以下任务：
请你基于API接口，构建查询的执行代码，具体来说时查询路由和查询参数构建查询代码。
你每次只需要返回当前需要的查询url和查询参数，用户会给你查询结果方便构建下一次查询参数。
我已经实现了python查询接口：
result = call_api(route: str, param: Dict, requirement: str) -> Dict or List[Dict]
当你返回python代码时，系统会执行代码并返回给你结果。
以下是一个通用示例：
```python
# 作用：这是一个代码示例
from api import call_api
route = '/<具体的路由>' -> str

query_conds = {{"key":"value"}}
need_fields = ['field1','field2','field3','field4','field5'] # 在这里列举你需要的字段，推荐3-5个
param = {{"query_conds":query_conds, "need_fields":need_fields}}  # need_fields字段不可省略可以为[]
requirement = "你简要的需求描述" # 用于日志
your_result_name = call_api(route,param,requirement) # 注意参数应该保存，请将your_result_name换成规范的名字 call_api接口会自动打印搜索内容
```
注意：
1.当你获取的结果需要进行批量操作的时候，也可以编写脚本，系统会执行并返回给你打印的结果，你在拿到返回结果的时候，会判断结果是否符合预期，
2.如果符合预期则输出结果，并提示任务已完成，如果不符合预期，或者接口提示错误，则按照提示修改代码。
3.代码在ipython中运行，所有之前运行的代码已经保存
4.查询代码执行成功后，如果有内容，请相信内容。
5.你每次只会完成提示的步骤内容，不要抢答。
6.不要使用假设参数，也不要在代码中出现假设这个词，会被拒绝运行。
7.如果查询成功，即使只要一条记录，请相信结果，因为这是内部数据库。
8.注意将结果命名成规范的名称
9.你会在代码的第一行注释代码的作用 格式为 ```python\n# 作用：xxx\n[你的代码]\n```
"""

api_doc = f"""
-----
# 以下是 API表
{APIS2}

**注意**：
请注意，参数的key必须传入备注中的参数，如果没有，则查询所有之后过滤。
所有参数应该为实际参数，不要使用`公司A`这样的代称，接口无法全量查找，所有的查询参数不能为空字符串，否则会给系统带来极大的损耗，切记。

用户常犯的错误有：使用公司简称而不是公司全称，公司名称输入错误例如字符重复，

如果是用户的参数有公司名称，提示用户通过/get_company_info 并将 query_conds 中的公司名称字段换为公司简称或公司代码字段
用户经常传错字段，也经常使用全角半角。也经常有一些认知错误，就是某些字段传的不规范，请好好分析用户哪里有问题。
案号错误参考这个案号的标准格式：(2019)沪0115民初61975号,对于法院名称，
以下是一个标准法院名称：上海市浦东新区人民法院，易错点是少了xx省xx市 的省市字样
你会处理用户的错误请求，你会得到用户的参数，执行结果和需求，用户的请求是错误请求，请基于文档分析用户的请求为何错误，参考常见错误
按照以下格式回复：
```
访问的接口[用户的接口]
接口参数格式为：[文档中接口参数格式]
作用为：[文档中接口的作用]，
你的需求为[用户传入的需求]
你的参数为[用户传入的参数]
你需求访问的接口是 [正确/错误]
您的参数可能是 [从参数示例找到的与用户传入最匹配的字段]
你的参数内容[这里判断用户的参数内容是不是准确，包括要使用英文符号，和认知错误]
完成[用户传入的需求]的建议为：一些建议
```
"""

get_table_prompt = f"""
以下为数据表：
-----
{TABLE_DESC}
-----
用户会给你一个问题，你会考虑这个问题需要使用从数据表中抽取整理哪些信息，然后整理成json返回。

# 你的做事步骤
1.分析参数，分析问题里的实体是什么，如上市公司名称，英文名称，子公司名称，案号等字段。
2.分析任务目的，根据任务目的和问题里的参数，设计执行流程。
3.找到相关的接口，确定接口传参正确。

"""

runner_prompt = """
【已经写好的python代码,并且已经在ipython中运行】
```python
from api import call_api
import re
import json
{}
```
任务要求，上面的python代码有一个函数以及使用函数打印出信息的示例，你需要做的是识别用户的问题，然后仿照示例编写代码，打印出答案。
请仅仅改变示例中的参数。代码写在```python ```内
"""


tip_prompt = """
实体表格
--
公司名称
公司简称
公司代码
统一社会信用代码
法院名称
地址 
省份
城市
区县
案号
--


题目类别有
常规题:查询一下北京淳中科技股份有限公司涉及的案件中，于2019年立案合同相关的纠纷案件涉案不为零的案件有几次？
API题，在常规题目上询问接口调用情况:天通股份的参保人数有多少人？API串行最佳调用次数为？
整合报告题，明确要求整合成报告或者word文档:马应龙药业集团股份有限公司关于工商信息（不包括公司简介）及投资金额过亿的全资子公司，母公司及子公司的审理时间在2020年涉案金额大于10万的裁判文书（不需要判决结果）整合报告。
起诉状题，明确要求写起诉状:赛轮集团股份有限公司与晶瑞电子材料股份有限公司发生了买卖合同纠纷，赛轮集团股份有限公司委托给了安徽安康律师事务所，晶瑞电子材料股份有限公司委托给了安徽奥成律师事务所，请写一份民事起诉状给公安县人民法院时间是2024-01-01


容易混淆的实体有:
公司名称和公司简称
公司名称为公司全称，格式为 行政区划+字号+行业+组织形式组成 例如：上海建工集团股份有限公司
公司简称一般为公司的简写 例如:上海建工，另外一些不规范的叫法，如上海建工公司，也要识别为公司简称
统一社会信用代码
18位数字或者字母组成，一般为91开头，例如：
913310007200456372
9165292274222840XN
公司代码：
指上市公司代码，一般是6位组成，
例如：
300674
600900
如果用户手误，一般是重复输入 300674->330000667744,这时你要识别成正确的
法院名称
例如：安徽省高级人民法院
法院代字，省份简称和省份简称+数字为法院代字
示例：皖01，京，川123

地址
西藏自治区那曲地区安多县帕那镇中路13号


案号：
案号格式为：“(”+收案年度+“)”+法院代字+类型代字+案件编号+“号”。 其中()可以是中英文。年份为(2020)，类型代字有民初，民终，民申，执等。
例如:(2020)新0104民初1269号


你从以下建议文档中提示用户：
--文档--
用户说区划代码，但是没有置顶哪个区划代码，则提示：区县区划代码和城市区划代码都要。
关于省市区信息，都需要查询到详细地点然后获取省市区
需要天气的时候提示用户：不要忘记获取日期字段。
胜诉方败诉方,提示用户需要从判决结果里寻找。
案件受理费,提示用户需要从判决结果里寻找。
不规则的案号，提示用户需要自己组装案号，案号格式为：“(”+收案年度+“)”+法院代字+类型代字+案件编号+“号”。 其中()可以是中英文。年份为(2020)，类型代字有民初，民终，民申，执等。
如果有公司简称，公司代码，统一社会信用代码，提示用户这些不可作为过滤，查询参数，要使用公司全称。
需要循环调用中间结果，例如问x公司的子公司分别注册在哪，提示用户：需要循环调用。
保留四位小数并无单位要求，提示用户转为万元并保留四位小数。
过滤在某法院，某法院级别，提示用户，使用 get_court_code_by_case_number 会返回案号的审理法院信息，法院级别为：['基层法院','中级法院','高级法院']
保留其他为小数或者进行单位换算：提示用户，一定要单独规划一步用于单位换算和保留小数。
如果是案号获取法院信息提示用户应该使用辅助函数。（不需要获取法院信息忽略此条）
法院地址，官网，邮箱，成立日期，地址提示用户需要获取法院名后使用 /get_court_info 接口
法院省份天气等信息提示用户要在获取地址后查询省市区
如果是案号获取执行法院信息，提示用户直接从XzgxfInfo中获取法院。
---

你需要做的是实体识别，然后根据实体和题目找到文档中的对应建议。文档中无对应建议的省略建议字段。
重要的,不在文档中的建议不要提示。
重要的是：判断这些实体主要是通过格式，因为用户的表述可能会不清楚，例如6位数字是公司代码，18位是统一社会信用代码。
你不需要回答问题，只是将问题中的
使用以下json格式回答,结果在```json ```内：
```json
{
    "实体": [
      {
        "名称": "实体名称1",
        "格式匹配为": "实体格式1"
      },
      {
        "名称": "实体名称2",
        "格式匹配为": "实体格式2"
      }
      // 可以有更多的实体
    ],
    "题型": "题型描述",
    "建议": "建议内容（可选）"
  }
```

题目：上海建工集团股份有限公司有多少家子公司？
示例：
```json
{
    "实体": [
      {
        "名称": "上海建工集团股份有限公司",
        "格式匹配为": "公司名称"
      }
    ],
    "题型": "常规题"
}
```

题目：安利股份在子公司共投资了多少亿元
示例：
```json
{
"实体": [
  {
    "名称": "安利股份",
    "格式匹配为": "公司简称"
  }
],
"题型": "常规题",
"建议": "公司简称不可作为过滤，查询参数，要使用公司全称，一定要单独规划一步用于单位换算和保留小数。"
}
```

题目：19年江苏省高级人民法院判，民申6268号，法院判决胜诉方是哪个公司？胜诉方律师事务所的地址在哪里？
示例：
```json
  {
    "实体": [
      {
        "名称": "江苏省高级人民法院",
        "格式匹配为": "法院名称"
      },
      {
        "名称": "19年江苏省高级人民法院判，民申6268号",
        "格式匹配为": "不规则案号"
      }
    ],
    "题型": "常规题",
    "建议": "需要自己组装案号，案号格式为：“(”+收案年度+“)”+法院代字+类型代字+案件编号+“号”。 其中()可以是中英文。年份为(2020)，类型代字有民初，民终，民申，执等。"
  }
```
"""


tip_prompt2 = """
实体表格
--
公司名称
公司简称
公司代码
统一社会信用代码
法院名称
地址 
省份
城市
区县
案号
--

容易混淆的实体有:
公司名称和公司简称
公司名称为公司全称，格式为 行政区划+字号+行业+组织形式组成 例如：上海建工集团股份有限公司
公司简称一般为公司的简写 例如:上海建工，另外一些不规范的叫法，如上海建工公司，也要识别为公司简称
统一社会信用代码
18位数字或者字母组成，一般为91开头，例如：
913310007200456372
9165292274222840XN
公司代码：
指上市公司代码，一般是6位组成，
例如：
300674
600900
如果用户手误，一般是重复输入 300674->330000667744(识别为公司代码),这时你要识别成正确的
法院名称
例如：安徽省高级人民法院
法院代字，省份简称和省份简称+数字为法院代字
示例：皖01，京，川123
地址以及省市区：
如果有地址你应该直接返回地址，而不是从地址中寻找省市区。
西藏自治区那曲地区安多县帕那镇中路13号 -> 地址，不返回省市区
有没有在安徽省判决的案件 -> 省份:安徽省
律师事务所名称
江西心者律师事务所
河南良承事务所

日期：
2020年1月1日
2020-10-11

其中，案号，公司代码有可能不规则，提示用户不规则。

案号：
案号格式为：“(”+收案年度+“)”+法院代字+类型代字+案件编号+“号”。 其中()可以是中英文。年份为(2020)，类型代字有民初，民终，民申，执等。
例如:(2020)新0104民初1269号
    (2019)川01民终6937号

你需要做的是实体识别，因为用户的表述可能会不清楚，例如6位数字是公司代码，18位是统一社会信用代码。
你不需要回答问题，只是将问题中的
使用以下json格式回答,结果在```json ```内：
```json
{
    "实体": [
      {
        "名称": "实体名称1",
        "格式匹配为": "实体格式1"
      },
      {
        "名称": "实体名称2",
        "格式匹配为": "实体格式2"
      }
      // 可以有更多的实体
    ]
  }
```

题目：上海建工集团股份有限公司有多少家子公司？
示例：
```json
{
    "实体": [
      {
        "名称": "上海建工集团股份有限公司",
        "格式匹配为": "公司名称"
      }
    ]
}
```

题目：航天机电公司涉案总额？
示例：
```json
{
    "实体": [
      {
        "名称": "航天机电",
        "格式匹配为": "公司简称"
      }
    ]
}
```

题目：安利股份在子公司共投资了多少亿元
示例：
```json
{
"实体": [
  {
    "名称": "安利股份",
    "格式匹配为": "公司简称"
  }
}
```

题目：19年江苏省高级人民法院判，民申6268号，法院判决胜诉方是哪个公司？胜诉方律师事务所的地址在哪里？
示例：
```json
  {
    "实体": [
      {
        "名称": "江苏省高级人民法院",
        "格式匹配为": "法院名称"
      },
      {
        "名称": "19年江苏省高级人民法院判，民申6268号",
        "格式匹配为": "不规则案号"
      }
    ]
  }
```
题目:合肥市高新区科学大道91号地址对应的省市区县分别是
示例：
```json
  {
    "实体": [
      {
        "名称": "合肥市高新区科学大道91号",
        "格式匹配为": "地址"
      }
    ]
  }
```
"""

answer_prompt = """
你会基于我给你的运行结果去回答问题。

以下是几个回答示例，解答完整参考此示例：
示例1：
题目：【2020】新2122民初1105号案件中，审理当天审理法院与原告的律师事务所所在城市的最低温度相差多少度？
解答步骤：`使用案号'(2020)新2122民初1105号'作为参数查询获得了案件详细信息，包括日期：2020-11-06 00:00:00，原告律师事务所：浙江百方律师事务所，
使用案号'(2020)新2122民初1105号'查询获得了法院的详细信息，包括法院名称：鄯善县人民法院，法院代字：新2122，区划代码：652122等，地点为新疆吐鲁番市鄯善县新城东路1208号
查询获得了法院所在省市信息，省份为新疆维吾尔自治区，城市为吐鲁番市
使用律师事务所名称'浙江百方律师事务所'作为参数查询获得了原告律师事务所的地址信息，地址为环城东路251号天洁大厦17层
使用律师事务所地址'环城东路251号天洁大厦17层'作为参数查询获得了律师事务所所在省市信息，省份为浙江省，城市为绍兴市
使用省份'新疆维吾尔自治区'，城市'吐鲁番市'，日期'2020年11月6日'作为参数查询获得了审理当天法院所在省市的最低温度，温度为22度
使用省份'浙江省'，城市'绍兴市'，日期'2020年11月6日'作为参数查询获得了审理当天律师事务所地址省市的最低温度，温度为3度
使用审理当天法院所在省市的最低温度和审理当天律师事务所地址省市的最低温度作为参数，计算获得了两者之差，结果为19度。`
你的答案：`使用案号'(2020)新2122民初1105号'查询案件详细信息，得到审理日期为2020年11月6日，原告律师事务所为浙江百方律师事务所，审理法院为鄯善县人民法院。
进一步查询得知，浙江百方律师事务所位于浙江百方律师事务所的地址为环城东路251号天洁大厦17层,省市为浙江省绍兴市，而鄯善县人民法院位于新疆吐鲁番市鄯善县新城东路1208号省市为新疆维吾尔自治区吐鲁番市。
根据这两个地点查询到2020年11月6日的最低温度，绍兴市的最低温度为3度，吐鲁番市的最低温度为22度。最后计算两个地点的最低温度差，得到相差19度。`

问题：海天精工注册在哪个市的哪个区县
解答步骤：["使用参数'query_conds': '公司简称': '海天精工', 'need_fields': ['公司名称', '公司简称']查询获得了结果'公司名称': '宁波海天精工股份有限公司', '公司简称': '海天精工'",
'', "使用参数'query_conds': '公司名称': '宁波海天精工股份有限公司', 'need_fields': ['企业地址']查询获得了结果'企业地址': '浙江省宁波市北仑区黄山西路235号', '公司名称': '宁波海天精工股份有限公司'
"使用参数'地址': '浙江省宁波市北仑区黄山西路235号', ['省份', '城市', '区县']查询获得了结果'省份': '浙江省', '城市': '宁波市', '区县': '北仑区'"]，
你的答案:海天精工(宁波海天精工股份有限公司)企业地址为浙江省宁波市北仑区黄山西路235号，该地址属于浙江省宁波市北仑区。


特别的， '-' 为答案之一，例如地址为 - 联系方式为 - 表示查到了信息，只要流程中含有，表示问题已经完成。
例如：(2020)新2122民初1105号案件的审理法院官网是什么?
解答步骤： `使用案号'(2020)新2122民初1105号'作为参数查询获得了审理该案件的法院名称为'鄯善县人民法院'
使用法院名称'鄯善县人民法院'作为参数查询获得了该法院的官网为'-' `
你的答案：`案号'(2020)新2122民初1105号'审理该案件的法院名称为'鄯善县人民法院',该法院的官网为'-' 
对于是否限制高消费，是否上市公司等判断是否的问题，你只需要关注后面的问题有没有被解答即可，如果被解答，则这个问题的答案为是。

另外对于题目错误的部分，你要纠正为正确的，例如案号，公司名称，法院名称等实体，以答案为主。
例如：题目 福建漳州中级人民法院的办公地址是什么？
解答步骤："查询福建漳州中级人民法院的办公地址参数为：'query_conds': '法院名称': '福建省漳州市中级人民法院', 'need_fields': ['法院地址', '法院名称'] 查询结果为:'法院地址': '漳州市龙文区水仙大街89号',
你的答案：福建漳州中级人民法院(福建省漳州市中级人民法院)的办公地址为:漳州市龙文区水仙大街89号

你应该尽可能相信我的结果并推理出所有答案，除非无法推理。
"""
