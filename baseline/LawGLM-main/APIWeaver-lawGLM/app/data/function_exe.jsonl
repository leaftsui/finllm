{"in": "from api import call_api\nimport re,json\nfrom math import inf\nfrom copy import deepcopy\nimport jieba.analyse\nimport contextlib\nimport io\njieba.analyse.textrank(\"111\")\n", "out": ["Building prefix dict from the default dictionary ...", "", "Dumping model to file cache /var/folders/87/sm46bt2s7hqbsj34djxvt2x40000gn/T/jieba.cache", "", "Loading model cost 0.277 seconds.", "", "Prefix dict has been built successfully.", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322107}
{"in": "def get_court_code_by_case_number(param):\n    \"\"\"\n    \u6839\u636e\u6848\u53f7\u67e5\u8be2\u6cd5\u9662\u4fe1\u606f\uff1a\"\u6cd5\u9662\u540d\u79f0\", \"\u884c\u653f\u7ea7\u522b\", \"\u6cd5\u9662\u7ea7\u522b\", \"\u6cd5\u9662\u4ee3\u5b57\", \"\u533a\u5212\u4ee3\u7801\",\"\u7ea7\u522b\"\uff0c\u4e0d\u53ef\u4ee5\u83b7\u53d6\u6cd5\u9662\u5730\u70b9\uff0c\n    \u5176\u4e2d\u6848\u53f7\u683c\u5f0f\u4e3a\uff1a(+\u6536\u6848\u5e74\u5ea6+)+\u6cd5\u9662\u4ee3\u5b57+\u7c7b\u578b\u4ee3\u5b57+\u6848\u4ef6\u7f16\u53f7+\u53f7\n    :param param: {'query_conds': {'\u6848\u53f7': 'str'}, \"need_fields\": [\"\u6cd5\u9662\u540d\u79f0\", \"\u884c\u653f\u7ea7\u522b\", \"\u6cd5\u9662\u7ea7\u522b\", \"\u6cd5\u9662\u4ee3\u5b57\", \"\u533a\u5212\u4ee3\u7801\",\"\u7ea7\u522b\"]}\n    :return:\n    \"\"\"\n    dic = {\"\u6cd5\u9662\u540d\u79f0\": \"\", \"\u884c\u653f\u7ea7\u522b\": \"\", \"\u6cd5\u9662\u7ea7\u522b\": \"\", \"\u6cd5\u9662\u4ee3\u5b57\": \"\", \"\u533a\u5212\u4ee3\u7801\": \"\", \"\u7ea7\u522b\": \"\"}\n    try:\n        case_number = param['query_conds']['\u6848\u53f7']\n        match1 = re.search(r\"[(\uff08](?P<year>\\d+)[)\uff09](?P<area_code>\\D)\", case_number)\n        if match1:\n            area_code = match1.group(\"area_code\")\n            match2 = re.search(rf\"{re.escape(area_code)}(?P<court_code>\\d*)\", case_number)\n            if match2:\n                court_code = match2.group(\"court_code\")\n            else:\n                court_code = ''\n            info1 = call_api('/get_court_code',\n                             {\"query_conds\": {\"\u6cd5\u9662\u4ee3\u5b57\": area_code + court_code}, \"need_fields\": []},\n                             print_str=False)\n            if info1:\n                print('\u4e0e\u6b64\u6848\u53f7\u76f8\u5173\u7684\u6cd5\u9662\u4fe1\u606f\u67e5\u8be2\u7ed3\u679c\u4e3a:', info1)\n                return info1\n            else:\n                return dic\n        else:\n            print('Traceback:\u6848\u53f7\u4e0d\u6807\u51c6')\n            return dic\n    except:\n        print(\n            'Traceback:\u9519\u8bef\u53c2\u6570\u6216\u8005\u662f\u6848\u53f7\u9519\u8bef \u9700\u8981\u7684\u53c2\u6570\u683c\u5f0f\u4e3a\uff1a{\"query_conds\": {\"\u6848\u53f7\": str}, \"need_fields\": []}\uff0c\u4f60\u7684\u53c2\u6570\u4e3a\uff1a',\n            param, '\u8bf7\u786e\u4fdd\u53c2\u6570\u6b63\u786e\u6216\u5408\u7406\u731c\u6d4b\u6848\u53f7')\n        try:\n            dic['\u6cd5\u9662\u4ee3\u5b57'] = area_code + court_code\n            return dic\n        except:\n            return dic", "out": [], "task_id": "953a-7e0577038d1d", "run_time": 1729322107}
{"in": "def sort_court_level(case_num_list, level_type='\u6cd5\u9662\u7ea7\u522b'):\n    \"\"\"\n    :param case_num_list: list[dict] or list \u6848\u53f7\u5217\u8868\u6216\u8005 [{\"\u6848\u53f7\":str}],\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u63a5\u53e3\u7ed3\u679c\n    :param level_type: \u6cd5\u9662\u7ea7\u522b \u6216\u8005 \u884c\u653f\u7ea7\u522b\n    :return:List[Dict['\u6848\u53f7','\u6cd5\u9662\u540d\u79f0']] \u6392\u5e8f\u540e\u7684\u7ed3\u679c\n    \"\"\"\n    if isinstance(case_num_list[0], dict) and '\u6848\u53f7' in case_num_list[0]:\n        case_num_list = [i['\u6848\u53f7'] for i in case_num_list]\n    court_list = []\n    for i in case_num_list:\n        with contextlib.redirect_stdout(io.StringIO()):\n            data = get_court_code_by_case_number({'query_conds': {'\u6848\u53f7': i}, \"need_fields\": []})\n        data = {'\u6848\u53f7': i, '\u6cd5\u9662\u540d\u79f0': data['\u6cd5\u9662\u540d\u79f0'], level_type: data[level_type]}\n        court_list.append(data)\n    if level_type == '\u6cd5\u9662\u7ea7\u522b':\n        court_level_dic = {'\u57fa\u5c42\u6cd5\u9662': 1, '\u4e2d\u7ea7\u6cd5\u9662': 2, '\u9ad8\u7ea7\u6cd5\u9662': 3}\n    else:\n        court_level_dic = {'\u533a\u53bf\u7ea7': 1, '\u5e02\u7ea7': 2, '\u7701\u7ea7': 3}\n    court_list = [i for i in court_list if i[level_type]]\n    court_list = sorted(court_list, key=lambda x: court_level_dic.get(x[level_type], 4), reverse=True)\n    print('\u6392\u5e8f\u7ed3\u679c\u4e3a:', court_list)\n    return court_list", "out": [], "task_id": "953a-7e0577038d1d", "run_time": 1729322107}
{"in": "def map_str_to_num(str_num):\n    if not isinstance(str_num, str):\n        return str_num\n    try:\n        str_num = str_num.replace(\"\u5343\", \"*1e3\")\n        str_num = str_num.replace(\"\u4e07\", \"*1e4\")\n        str_num = str_num.replace(\"\u4ebf\", \"*1e8\")\n        return eval(str_num)\n    except:\n        pass\n    return -100\n", "out": [], "task_id": "953a-7e0577038d1d", "run_time": 1729322107}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\nfrom api import call_api\n\nroute = '/get_company_info'\nquery_conds = {'\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}\nneed_fields = ['\u516c\u53f8\u540d\u79f0']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\"\ncompany_full_name_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}, 'need_fields': ['\u516c\u53f8\u540d\u79f0', '\u516c\u53f8\u7b80\u79f0']} \u67e5\u8be2\u7ed3\u679c\u4e3a:{'\u516c\u53f8\u540d\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8', '\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322111}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\nfrom api import call_api\n\nroute = '/get_sub_company_info_list'\nquery_conds = {'\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': company_full_name_result['\u516c\u53f8\u540d\u79f0']}\nneed_fields = ['\u516c\u53f8\u540d\u79f0', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\"\nsub_company_info_list_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, 'need_fields': ['\u516c\u53f8\u540d\u79f0', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0']} \u67e5\u8be2\u7ed3\u679c\u4e3a:[{'\u516c\u53f8\u540d\u79f0': '\u7518\u8083\u795e\u821f\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '8800.00\u4e07', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, {'\u516c\u53f8\u540d\u79f0': '\u7518\u8083\u5f20\u6396\u795e\u821f\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '1.19\u4ebf', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, {'\u516c\u53f8\u540d\u79f0': '\u5609\u5cea\u5173\u6052\u80fd\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '3400.00\u4e07', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}] # \u53ea\u663e\u793a\u524d\u4e09\u6761 \u4e00\u517118\u6761\uff0c\u5982\u679c\u9898\u76ee\u67e5\u770b\u6240\u6709\u7684\u5b50\u516c\u53f8\u6216\u8005\u6848\u53f7\u7684\u9700\u6c42\uff0c\u8bf7\u4f60\u5355\u72ec\u6253\u5370\u3002", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322118}
{"in": "def filter_sub_company(sub_company_list, filter_dict):\n    \"\"\"\n    \u8fc7\u6ee4\u5b50\u516c\u53f8\u4fe1\u606f\n    :param sub_company_list:  /get_sub_company_info_list \u8fd4\u56de\u7684\u7ed3\u679c\n    :param filter_dict: dict \u5305\u542b\u8fc7\u6ee4\u53c2\u6570\u7684\u5b57\u5178\n        - \u6700\u5c0f\u6295\u8d44\u91d1\u989d: str \u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\uff08\u4f8b\u5982 \"1\u4ebf\", \"500\u4e07\"\uff09\u9ed8\u8ba4\u4e3a -1\n        - \u6700\u5927\u6295\u8d44\u91d1\u989d: str \u6700\u5927\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\uff08\u4f8b\u5982 \"1\u4ebf\", \"500\u4e07\"\uff09\u9ed8\u8ba4\u4e3ainf\n        - \u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b: str|int \u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\uff0c\u652f\u6301 0-100 \u7684\u767e\u5206\u5236\uff0c\u9ed8\u8ba4\u4e3a0\n        - \u6700\u5927\u6301\u80a1\u6bd4\u4f8b: str|int \u6700\u5927\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\uff0c\u652f\u6301 0-100 \u7684\u767e\u5206\u5236\uff0c\u9ed8\u8ba4\u4e3a100\n        \u6ce8\u610f\uff1a\u5b57\u6bb5\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5b58\u5728\uff0c\u4f8b\u5982\u7b5b\u9009\u5168\u8d44\u5b50\u516c\u53f8\u53ea\u9700\u8981:{'\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b':100}\uff0c\u6ca1\u6709\u5176\u4ed6\u5b57\u6bb5\u3002\n            \u7279\u522b\u7684\uff0c\u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\u4e3a\u5927\u4e8e\uff0c\u5176\u4f59\u90fd\u5305\u542b\u7b49\u4e8e\uff0c\u4f8b\u5982\uff1a{'\u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d':0} \u4f1a\u7b5b\u9009\u5927\u4e8e0\u7684\n    :return: list[dict] \u5305\u542b\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u516c\u53f8\u4fe1\u606f\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5b50\u516c\u53f8\u4fe1\u606f\u4ee5\u5b57\u5178\u5f62\u5f0f\u8868\u793a\n    \"\"\"\n    if not set(filter_dict.keys()) < {'\u6700\u5c0f\u6295\u8d44\u91d1\u989d', '\u6700\u5927\u6295\u8d44\u91d1\u989d', '\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b', '\u6700\u5927\u6301\u80a1\u6bd4\u4f8b'}:\n        print(\"Traceback:\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u6587\u6863\uff0c\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0d\u652f\u6301,\u4f60\u53ef\u4ee5\u8fc7\u6ee4\u7684\u6761\u4ef6key\u4e3a:'\u6700\u5c0f\u6295\u8d44\u91d1\u989d','\u6700\u5927\u6295\u8d44\u91d1\u989d','\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b','\u6700\u5927\u6301\u80a1\u6bd4\u4f8b' \u8bf7\u9605\u8bfb\u6587\u6863\u540e\u91cd\u65b0\u8c03\u7528\u6216\u81ea\u5df1\u5b9e\u73b0\u7b5b\u9009\")\n        return []\n    try:\n        if set(filter_dict.keys()) == {'\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b'} and int(\n            filter_dict['\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b']) == 0: return sub_company_list\n        amount_min = filter_dict.get('\u6700\u5c0f\u6295\u8d44\u91d1\u989d', -1)\n        amount_max = filter_dict.get('\u6700\u5927\u6295\u8d44\u91d1\u989d', float('inf'))\n        holding_ratio_min = filter_dict.get('\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b', 0)\n        holding_ratio_max = filter_dict.get('\u6700\u5927\u6301\u80a1\u6bd4\u4f8b', 100)\n        amount_min = map_str_to_num(amount_min)\n        amount_max = map_str_to_num(amount_max)\n        holding_ratio_min = map_str_to_num(holding_ratio_min)\n        holding_ratio_max = map_str_to_num(holding_ratio_max)\n        filter_list = []\n        for i in sub_company_list:\n            raw_info = deepcopy(i)\n            i['\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d'] = map_str_to_num(i['\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d'])\n            i['\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b'] = int(float(str(i['\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b']).rstrip('%')))\n            if amount_min < i['\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d'] <= amount_max and holding_ratio_min <= i[\n                '\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b'] <= holding_ratio_max:\n                filter_list.append(raw_info)\n        print('\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u4e3a:', filter_list)\n        return filter_list\n    except KeyError as e:\n        print(f'''Traceback:\u4f60\u5728\u4e4b\u524d\u6ca1\u6709\u83b7\u53d6{e}\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u5148\u83b7\u53d6\u6b64\u5b57\u6bb5\u518d\u6765\u8fc7\u6ee4''')\n        return []\n    except Exception as e:\n        print(f\"\"\"\nTraceback:\n{e}\n\u4f60\u7684\u53c2\u6570\u9519\u8bef\u6216\u8005\u662f\u67e5\u8be2\u7ed3\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u6392\u67e5\uff1a\n\u5224\u65ad\u8f93\u5165\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\n  - sub_company_list: \u4f60\u4e4b\u524d\u83b7\u53d6\u7684\u5b50\u516c\u53f8\u4fe1\u606f\u7684\u5217\u8868\uff0c\u5fc5\u987b\u5305\u542b\u7b5b\u9009\u5b57\u6bb5\uff0c\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b57\u6bb5\u540e\u518d\u6765\u8fc7\u6ee4\n  - filter_dict: \u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u4e0b\u6240\u793a\uff1a\uff1a{{\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\":\"str\", \"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\":\"str\"}} \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\uff0c\u6216\u8005\u5c06\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\u586b\u7a7a\u3002\n\u4f60\u5f53\u524d\u7684\u53c2\u6570\u4e3a\uff1a\nsub_company_list: {sub_company_list[:3]} # \u53ea\u663e\u793a\u524d\u4e09\u6761    \nfilter_dict: {filter_dict} \n\u8bf7\u5206\u6790\u539f\u56e0\uff0c\u5982\u679c\u662f sub_company_list \u53c2\u6570\u9519\u8bef\uff0c\u4f60\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u7f16\u7801\u4e2d\u8c03\u7528 call_api \u91cd\u65b0\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u4f20\u5165 filter_sub_company \u51fd\u6570\uff0c\u5199\u5728\u4e00\u4e2a Python \u811a\u672c\u4e2d    \n\"\"\")\n\n        return []", "out": [], "task_id": "953a-7e0577038d1d", "run_time": 1729322120}
{"in": "\n# \u4f5c\u7528\uff1a\u627e\u51fa\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u5e76\u8f93\u51fa\nfrom api import call_api\n\n# \u4f7f\u7528 /rank \u63a5\u53e3\u5bf9\u6b65\u9aa4\u4e8c\u5f97\u5230\u7684\u5b50\u516c\u53f8\u5217\u8868\u8fdb\u884c\u6392\u5e8f\nroute = '/rank'\nparam = {\n    \"data_list\": sub_company_info_list_result,\n    \"key\": '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d',\n    \"is_desc\": True  # \u964d\u5e8f\u6392\u5e8f\n}\nrequirement = \"\u6309\u7167\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\u964d\u5e8f\u6392\u5e8f\u5b50\u516c\u53f8\u5217\u8868\"\nsorted_sub_company_list = call_api(route, param, requirement)\n\n# \u53d6\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\nhighest_investment_sub_company = sorted_sub_company_list[0]\n\n# \u6253\u5370\u7ed3\u679c\nprint(\"\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u4fe1\u606f\uff1a\")\nprint(highest_investment_sub_company)\n", "out": ["\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u4fe1\u606f\uff1a", "{'\u516c\u53f8\u540d\u79f0': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '8.54\u4ebf', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322128}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\nfrom api import call_api\n\nroute = '/get_legal_document_list'\nquery_conds = {'\u5173\u8054\u516c\u53f8': highest_investment_sub_company['\u516c\u53f8\u540d\u79f0']}\nneed_fields = ['\u6848\u53f7', '\u6848\u7531', '\u6d89\u6848\u91d1\u989d']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\"\nlawsuit_info_list_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, 'need_fields': ['\u6848\u53f7', '\u6848\u7531', '\u6d89\u6848\u91d1\u989d', '\u5173\u8054\u516c\u53f8']} \u67e5\u8be2\u7ed3\u679c\u4e3a:[{'\u6848\u53f7': '(2019)\u6caa0115\u6c11\u521d61975\u53f7', '\u6848\u7531': '\u670d\u52a1\u5408\u540c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '1254802.58', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, {'\u6848\u53f7': '(2019)\u6caa0115\u6c11\u521d91149\u53f7', '\u6848\u7531': '\u8ffd\u7d22\u52b3\u52a8\u62a5\u916c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '0', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, {'\u6848\u53f7': '(2020)\u6caa0115\u6c11\u521d3857\u53f7', '\u6848\u7531': '\u6280\u672f\u59d4\u6258\u5f00\u53d1\u5408\u540c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '21849', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}]", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322138}
{"in": "def filter_legal_docs(legal_documents_result, filter_dict):\n    \"\"\"\n    \u8fc7\u6ee4\u6cd5\u5f8b\u6587\u6863\u4fe1\u606f\n    \u6839\u636e\u6307\u5b9a\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u4ece\u6cd5\u5f8b\u6587\u6863\u5217\u8868\u4e2d\u8fc7\u6ee4\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\u3002\u6848\u53f7\u683c\u5f0f\u4e3a\uff1a(+\u6536\u6848\u5e74\u5ea6+)+\u6cd5\u9662\u4ee3\u5b57+\u7c7b\u578b\u4ee3\u5b57+\u6848\u4ef6\u7f16\u53f7+\u53f7\u3002\n    \u53c2\u6570:\n    legal_documents_result (list[dict]): \u901a\u8fc7 get_legal_document_list \u63a5\u53e3\u83b7\u5f97\u7684\u6cd5\u5f8b\u6587\u6863\u5217\u8868\u3002\n    param filter_dict (dict): \u5305\u542b\u8fc7\u6ee4\u6761\u4ef6\u7684\u5b57\u5178\n        - \u6848\u7531 (str): \u6848\u4ef6\u7684\u6848\u7531\uff0c\u652f\u6301\u6a21\u7cca\u5339\u914d\uff0c\u4f46\u662f\u5fc5\u987b\u662f\u5173\u952e\u8bcd\u4f8b\u5982:\u52b3\u52a1\u7ea0\u7eb7,\u503a\u6743\u7ea0\u7eb7\uff0c\u4fb5\u5bb3\u5546\u6807\u6743\u7ea0\u7eb7\u3002\n        - \u5e74\u4efd (str): \u6848\u4ef6\u7684\u5e74\u4efd\uff0c\u4f8b\u5982 '2019'\u3002\n        - \u5e74\u4efd\u7c7b\u578b (str): \u5e74\u4efd\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f '\u7acb\u6848\u65e5\u671f'\u3001'\u8d77\u8bc9\u65e5\u671f' \u6216 '\u5ba1\u7406\u65e5\u671f'\u3002\n        - \u5ba1\u7406\u7701\u4efd: (str) \u6848\u4ef6\u5ba1\u7406\u7684\u7701\u4efd\uff0c\u6ce8\u610f\u662f\u7b80\u79f0\uff0c\u4f8b\u5982 \u5b89\u5fbd\u7701->\u7696 \u56db\u5ddd->\u5ddd\n        - \u6848\u4ef6\u7c7b\u578b (str): \u6848\u4ef6\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f ['\u6c11', '\u6c11\u521d', '\u6c11\u7ec8', '\u6267','\u6c11\u7533'] \u4e4b\u4e00\u3002\n            - '\u6c11': \u6c11\u4e8b\u8bc9\u8bbc\n            - '\u6c11\u521d': \u6c11\u4e8b\u8bc9\u8bbc\u521d\u5ba1\n            - '\u6c11\u7ec8': \u6c11\u4e8b\u8bc9\u8bbc\u7ec8\u5ba1\n            - '\u6267': \u6267\u884c\u6848\u4ef6\n        - \u539f\u544a (str): \u6848\u4ef6\u7684\u539f\u544a\u3002\n        - \u88ab\u544a (str): \u6848\u4ef6\u7684\u88ab\u544a\u3002\n        - \u6700\u5c0f\u6d89\u6848\u91d1\u989d (str): \u6848\u4ef6\u7684\u6700\u5c0f\u6d89\u6848\u91d1\u989d\uff0c\u652f\u6301 1\u4ebf\uff0c10\u4e07\u8fd9\u79cd\u63cf\u8ff0,\u6d89\u6848\u91d1\u989d\u4e0d\u4e3a0\u7684\u586b\u201c0\u201d\n        - \u6700\u5927\u6d89\u6848\u91d1\u989d (str): \u6848\u4ef6\u7684\u6700\u5927\u6d89\u6848\u91d1\u989d\uff0c\u652f\u6301 1\u4ebf\uff0c10\u4e07\u8fd9\u79cd\u63cf\u8ff0\n        - \u6cd5\u9662\u4ee3\u5b57(str): \u5ba1\u7406\u6cd5\u9662\u7684\u4ee3\u5b57\n    \u6ce8\u610f\uff1a\u5b57\u6bb5\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5b58\u5728\uff0c\u4f8b\u5982\u7b5b\u90092019\u5e74\u7684\u6267\u884c\u6848\u4ef6\u53ea\u9700\u8981{'\u5e74\u4efd':'2019','\u5e74\u4efd\u7c7b\u578b':'\u7acb\u6848\u65e5\u671f','\u6848\u4ef6\u7c7b\u578b':'\u6267'}\u3002\n    \u8fd4\u56de:\n        list[dict]: \u5305\u542b\u7b26\u5408\u6761\u4ef6\u7684\u6cd5\u5f8b\u6587\u6863\u4fe1\u606f\u7684\u5217\u8868\u3002\n    \"\"\"\n    if not set(filter_dict.keys()) < {'\u6848\u7531', '\u5e74\u4efd', '\u5e74\u4efd\u7c7b\u578b', '\u6848\u4ef6\u7c7b\u578b', '\u539f\u544a', '\u88ab\u544a', '\u6700\u5c0f\u6d89\u6848\u91d1\u989d',\n                                      '\u6700\u5927\u6d89\u6848\u91d1\u989d', '\u5ba1\u7406\u7701\u4efd'}:\n        print(\"Traceback:\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u6587\u6863\uff0c\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0d\u652f\u6301,\u4f60\u53ef\u4ee5\u8fc7\u6ee4\u7684\u6761\u4ef6key\u4e3a:'\u6848\u7531','\u5e74\u4efd','\u5e74\u4efd\u7c7b\u578b','\u6848\u4ef6\u7c7b\u578b','\u539f\u544a','\u88ab\u544a','\u6700\u5c0f\u6d89\u6848\u91d1\u989d','\u6700\u5927\u6d89\u6848\u91d1\u989d','\u5ba1\u7406\u7701\u4efd' \u8bf7\u9605\u8bfb\u6587\u6863\u540e\u91cd\u65b0\u8c03\u7528\u6216\u81ea\u5df1\u5b9e\u73b0\u7b5b\u9009\")\n        return []\n    try:\n        if isinstance(legal_documents_result, dict):\n            legal_documents_result = [legal_documents_result]\n        if '\u6848\u4ef6\u7c7b\u578b' in filter_dict and filter_dict['\u6848\u4ef6\u7c7b\u578b']:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict['\u6848\u4ef6\u7c7b\u578b'] in i['\u6848\u53f7']]\n        if '\u539f\u544a' in filter_dict and filter_dict['\u539f\u544a']:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict['\u539f\u544a'] in i['\u539f\u544a']]\n        if '\u88ab\u544a' in filter_dict and filter_dict['\u88ab\u544a']:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict['\u88ab\u544a'] in i['\u88ab\u544a']]\n        if '\u5ba1\u7406\u7701\u4efd' in filter_dict and filter_dict['\u5ba1\u7406\u7701\u4efd']:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict['\u5ba1\u7406\u7701\u4efd'] in i['\u6848\u53f7']]\n        if '\u6848\u7531' in filter_dict and filter_dict['\u6848\u7531']:\n            keywords_tfidf = jieba.analyse.extract_tags(filter_dict['\u6848\u7531'], topK=5, withWeight=False)\n            legal_documents_result_reasons = []\n            for i in legal_documents_result:\n                if keywords_tfidf[0] in i['\u6848\u7531']:\n                    legal_documents_result_reasons.append(i)\n        else:\n            legal_documents_result_reasons = legal_documents_result\n        if '\u5e74\u4efd' in filter_dict and filter_dict['\u5e74\u4efd']:\n            filter_legal_documents_result = []\n            for i in legal_documents_result_reasons:\n                if '\u5e74\u4efd\u7c7b\u578b' in filter_dict and filter_dict['\u5e74\u4efd\u7c7b\u578b'] in ['\u5ba1\u7406\u65e5\u671f']:\n                    if i['\u65e5\u671f'].startswith(filter_dict['\u5e74\u4efd']):\n                        filter_legal_documents_result.append(i)\n                else:\n                    if f\"({filter_dict['\u5e74\u4efd']})\" in i['\u6848\u53f7'] or f\"\uff08{filter_dict['\u5e74\u4efd']}\uff09\" in i['\u6848\u53f7']:\n                        filter_legal_documents_result.append(i)\n        else:\n            filter_legal_documents_result = legal_documents_result_reasons\n        if '\u6700\u5c0f\u6d89\u6848\u91d1\u989d' in filter_dict:\n            min_case = map_str_to_num(filter_dict.get('\u6700\u5c0f\u6d89\u6848\u91d1\u989d'))\n            filter_legal_documents_result = [i for i in filter_legal_documents_result if\n                                             map_str_to_num(i['\u6d89\u6848\u91d1\u989d']) > min_case]\n        if '\u6700\u5927\u6d89\u6848\u91d1\u989d' in filter_dict:\n            max_case = map_str_to_num(filter_dict.get('\u6700\u5927\u6d89\u6848\u91d1\u989d'))\n            filter_legal_documents_result = [i for i in filter_legal_documents_result if\n                                             map_str_to_num(i['\u6d89\u6848\u91d1\u989d']) < max_case]\n        if '\u6cd5\u9662\u4ee3\u5b57' in filter_dict:\n            fy_code = filter_dict['\u6cd5\u9662\u4ee3\u5b57']\n            filter_legal_documents_result = [i for i in filter_legal_documents_result if\n                                             re.search(fy_code + '(?!\\d)', i['\u6848\u53f7'])]\n        print(f'\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u4e3a:{filter_legal_documents_result}')\n        return filter_legal_documents_result\n    except KeyError as e:\n        print(f'''Traceback:\u4f60\u5728\u4e4b\u524d\u6ca1\u6709\u83b7\u53d6{e}\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u5148\u83b7\u53d6\u6b64\u5b57\u6bb5\u518d\u6765\u8fc7\u6ee4''')\n        return []\n    except Exception as e:\n        print(f\"\"\"\nTraceback:\n{e}\n\u4f60\u7684\u53c2\u6570\u9519\u8bef\u6216\u8005\u662f\u4e4b\u524d\u7684\u6b65\u9aa4\u6709\u95ee\u9898\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u6392\u67e5\uff1a\n\u9700\u8981\u7684\u53c2\u6570\u4e3a\uff1a\nlegal_documents_result: \u901a\u8fc7 get_legal_document_list \u63a5\u53e3\u83b7\u5f97\u7684\u6570\u636e\uff0c\u9700\u8981\u5728need_fields\u52a0\u5165\u76f8\u5173\u5b57\u6bb5\uff0c\u5982\uff1a\u6848\u7531\uff0c\u65e5\u671f\uff0c\u6848\u53f7\uff0c\u539f\u544a\uff0c\u88ab\u544a\u7b49\nfilter_dict:\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u4e0b\u6240\u793a\uff1a{{\"\u6848\u7531\":\"str\",'\u5e74\u4efd':'2019','\u5e74\u4efd\u7c7b\u578b':'\u7acb\u6848\u65e5\u671f/\u8d77\u8bc9\u65e5\u671f/\u5ba1\u7406\u65e5\u671f','\u539f\u544a':'xxx','\u88ab\u544a':'xxx'}}\" \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\uff0c\u6216\u8005\u5c06\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\u586b\u7a7a\u3002\n\u4f60\u5f53\u524d\u7684\u53c2\u6570\u4e3a\uff1a\nlegal_documents_result:{legal_documents_result[:3]} # \u53ea\u663e\u793a\u524d\u4e09\u6761\nfilter_dict:{filter_dict}\n\u8bf7\u5206\u6790\u539f\u56e0\uff0c\u5982\u679c\u662f legal_documents_result \u53c2\u6570\u9519\u8bef\uff0c\u4f60\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u7f16\u7801\u4e2d\u8c03\u7528 call_api \u91cd\u65b0\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u4f20\u5165 filter_legal_docs \u51fd\u6570\uff0c\u5199\u5728\u4e00\u4e2apython\u811a\u672c\u4e2d\n\"\"\")\n        return []", "out": ["<>:71: SyntaxWarning: invalid escape sequence '\\d'", "<>:71: SyntaxWarning: invalid escape sequence '\\d'", "/var/folders/87/sm46bt2s7hqbsj34djxvt2x40000gn/T/ipykernel_64508/2920038821.py:71: SyntaxWarning: invalid escape sequence '\\d'", "  re.search(fy_code + '(?!\\d)', i['\u6848\u53f7'])]", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322142}
{"in": "\n# \u4f5c\u7528\uff1a\u627e\u51fa\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\u5e76\u8f93\u51fa\nfrom api import call_api\n\n# \u4f7f\u7528 /rank \u63a5\u53e3\u5bf9\u6b65\u9aa4\u56db\u5f97\u5230\u7684\u6848\u4ef6\u5217\u8868\u8fdb\u884c\u6392\u5e8f\nroute = '/rank'\nparam = {\n    \"data_list\": lawsuit_info_list_result,\n    \"key\": '\u6d89\u6848\u91d1\u989d',\n    \"is_desc\": True  # \u964d\u5e8f\u6392\u5e8f\n}\nrequirement = \"\u6309\u7167\u6d89\u6848\u91d1\u989d\u964d\u5e8f\u6392\u5e8f\u6848\u4ef6\u5217\u8868\"\nsorted_lawsuit_list = call_api(route, param, requirement)\n\n# \u53d6\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\nhighest_amount_case_cause = sorted_lawsuit_list[0]['\u6848\u7531']\n\n# \u6253\u5370\u7ed3\u679c\nprint(\"\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\uff1a\")\nprint(highest_amount_case_cause)\n", "out": ["\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\uff1a", "\u670d\u52a1\u5408\u540c\u7ea0\u7eb7", ""], "task_id": "953a-7e0577038d1d", "run_time": 1729322187}
{"in": "from api import call_api\nimport re,json\nfrom math import inf\nfrom copy import deepcopy\nimport jieba.analyse\nimport contextlib\nimport io\njieba.analyse.textrank(\"111\")\n", "out": ["/Users/zr/Code/LawGLM/APIWeaver-lawGLM/app/utils/arg_utils.py:42: SyntaxWarning: invalid escape sequence '\\{'", "  param = re.split(\"\u53c2\u6570.{0,2}\\{\", suggestion)", "", "Building prefix dict from the default dictionary ...", "", "Loading model from cache /var/folders/87/sm46bt2s7hqbsj34djxvt2x40000gn/T/jieba.cache", "", "Loading model cost 0.356 seconds.", "", "Prefix dict has been built successfully.", ""], "task_id": "91dc-7e0577038d1d", "run_time": 1729349134}
{"in": "def get_court_code_by_case_number(param):\n    \"\"\"\n    \u6839\u636e\u6848\u53f7\u67e5\u8be2\u6cd5\u9662\u4fe1\u606f\uff1a\"\u6cd5\u9662\u540d\u79f0\", \"\u884c\u653f\u7ea7\u522b\", \"\u6cd5\u9662\u7ea7\u522b\", \"\u6cd5\u9662\u4ee3\u5b57\", \"\u533a\u5212\u4ee3\u7801\",\"\u7ea7\u522b\"\uff0c\u4e0d\u53ef\u4ee5\u83b7\u53d6\u6cd5\u9662\u5730\u70b9\uff0c\n    \u5176\u4e2d\u6848\u53f7\u683c\u5f0f\u4e3a\uff1a(+\u6536\u6848\u5e74\u5ea6+)+\u6cd5\u9662\u4ee3\u5b57+\u7c7b\u578b\u4ee3\u5b57+\u6848\u4ef6\u7f16\u53f7+\u53f7\n    :param param: {'query_conds': {'\u6848\u53f7': 'str'}, \"need_fields\": [\"\u6cd5\u9662\u540d\u79f0\", \"\u884c\u653f\u7ea7\u522b\", \"\u6cd5\u9662\u7ea7\u522b\", \"\u6cd5\u9662\u4ee3\u5b57\", \"\u533a\u5212\u4ee3\u7801\",\"\u7ea7\u522b\"]}\n    :return:\n    \"\"\"\n    dic = {\"\u6cd5\u9662\u540d\u79f0\": \"\", \"\u884c\u653f\u7ea7\u522b\": \"\", \"\u6cd5\u9662\u7ea7\u522b\": \"\", \"\u6cd5\u9662\u4ee3\u5b57\": \"\", \"\u533a\u5212\u4ee3\u7801\": \"\", \"\u7ea7\u522b\": \"\"}\n    try:\n        case_number = param[\"query_conds\"][\"\u6848\u53f7\"]\n        match1 = re.search(r\"[(\uff08](?P<year>\\d+)[)\uff09](?P<area_code>\\D)\", case_number)\n        if match1:\n            area_code = match1.group(\"area_code\")\n            match2 = re.search(rf\"{re.escape(area_code)}(?P<court_code>\\d*)\", case_number)\n            if match2:\n                court_code = match2.group(\"court_code\")\n            else:\n                court_code = \"\"\n            info1 = call_api(\n                \"/get_court_code\",\n                {\"query_conds\": {\"\u6cd5\u9662\u4ee3\u5b57\": area_code + court_code}, \"need_fields\": []},\n                print_str=False,\n            )\n            if info1:\n                print(\"\u4e0e\u6b64\u6848\u53f7\u76f8\u5173\u7684\u6cd5\u9662\u4fe1\u606f\u67e5\u8be2\u7ed3\u679c\u4e3a:\", info1)\n                return info1\n            else:\n                return dic\n        else:\n            print(\"Traceback:\u6848\u53f7\u4e0d\u6807\u51c6\")\n            return dic\n    except:\n        print(\n            'Traceback:\u9519\u8bef\u53c2\u6570\u6216\u8005\u662f\u6848\u53f7\u9519\u8bef \u9700\u8981\u7684\u53c2\u6570\u683c\u5f0f\u4e3a\uff1a{\"query_conds\": {\"\u6848\u53f7\": str}, \"need_fields\": []}\uff0c\u4f60\u7684\u53c2\u6570\u4e3a\uff1a',\n            param,\n            \"\u8bf7\u786e\u4fdd\u53c2\u6570\u6b63\u786e\u6216\u5408\u7406\u731c\u6d4b\u6848\u53f7\",\n        )\n        try:\n            dic[\"\u6cd5\u9662\u4ee3\u5b57\"] = area_code + court_code\n            return dic\n        except:\n            return dic", "out": [], "task_id": "91dc-7e0577038d1d", "run_time": 1729349134}
{"in": "def sort_court_level(case_num_list, level_type=\"\u6cd5\u9662\u7ea7\u522b\"):\n    \"\"\"\n    :param case_num_list: list[dict] or list \u6848\u53f7\u5217\u8868\u6216\u8005 [{\"\u6848\u53f7\":str}],\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u63a5\u53e3\u7ed3\u679c\n    :param level_type: \u6cd5\u9662\u7ea7\u522b \u6216\u8005 \u884c\u653f\u7ea7\u522b\n    :return:List[Dict['\u6848\u53f7','\u6cd5\u9662\u540d\u79f0']] \u6392\u5e8f\u540e\u7684\u7ed3\u679c\n    \"\"\"\n    if isinstance(case_num_list[0], dict) and \"\u6848\u53f7\" in case_num_list[0]:\n        case_num_list = [i[\"\u6848\u53f7\"] for i in case_num_list]\n    court_list = []\n    for i in case_num_list:\n        with contextlib.redirect_stdout(io.StringIO()):\n            data = get_court_code_by_case_number({\"query_conds\": {\"\u6848\u53f7\": i}, \"need_fields\": []})\n        data = {\"\u6848\u53f7\": i, \"\u6cd5\u9662\u540d\u79f0\": data[\"\u6cd5\u9662\u540d\u79f0\"], level_type: data[level_type]}\n        court_list.append(data)\n    if level_type == \"\u6cd5\u9662\u7ea7\u522b\":\n        court_level_dic = {\"\u57fa\u5c42\u6cd5\u9662\": 1, \"\u4e2d\u7ea7\u6cd5\u9662\": 2, \"\u9ad8\u7ea7\u6cd5\u9662\": 3}\n    else:\n        court_level_dic = {\"\u533a\u53bf\u7ea7\": 1, \"\u5e02\u7ea7\": 2, \"\u7701\u7ea7\": 3}\n    court_list = [i for i in court_list if i[level_type]]\n    court_list = sorted(court_list, key=lambda x: court_level_dic.get(x[level_type], 4), reverse=True)\n    print(\"\u6392\u5e8f\u7ed3\u679c\u4e3a:\", court_list)\n    return court_list", "out": [], "task_id": "91dc-7e0577038d1d", "run_time": 1729349134}
{"in": "def map_str_to_num(str_num):\n    if not isinstance(str_num, str):\n        return str_num\n    try:\n        str_num = str_num.replace(\"\u5343\", \"*1e3\")\n        str_num = str_num.replace(\"\u4e07\", \"*1e4\")\n        str_num = str_num.replace(\"\u4ebf\", \"*1e8\")\n        return eval(str_num)\n    except:\n        pass\n    return -100\n", "out": [], "task_id": "91dc-7e0577038d1d", "run_time": 1729349134}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\nfrom api import call_api\n\nroute = '/get_company_info'\nquery_conds = {'\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}\nneed_fields = ['\u516c\u53f8\u540d\u79f0']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\"\ncompany_full_name_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}, 'need_fields': ['\u516c\u53f8\u540d\u79f0', '\u516c\u53f8\u7b80\u79f0']} \u67e5\u8be2\u7ed3\u679c\u4e3a:{'\u516c\u53f8\u540d\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8', '\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}", ""], "task_id": "91dc-7e0577038d1d", "run_time": 1729349138}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\nfrom api import call_api\n\nroute = '/get_sub_company_info_list'\nquery_conds = {'\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': company_full_name_result['\u516c\u53f8\u540d\u79f0']}\nneed_fields = ['\u516c\u53f8\u540d\u79f0', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\"\nsub_company_info_list_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, 'need_fields': ['\u516c\u53f8\u540d\u79f0', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0']} \u67e5\u8be2\u7ed3\u679c\u4e3a:[{'\u516c\u53f8\u540d\u79f0': '\u7518\u8083\u795e\u821f\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '8800.00\u4e07', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, {'\u516c\u53f8\u540d\u79f0': '\u7518\u8083\u5f20\u6396\u795e\u821f\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '1.19\u4ebf', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, {'\u516c\u53f8\u540d\u79f0': '\u5609\u5cea\u5173\u6052\u80fd\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '3400.00\u4e07', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}] # \u53ea\u663e\u793a\u524d\u4e09\u6761 \u4e00\u517118\u6761\uff0c\u5982\u679c\u9898\u76ee\u67e5\u770b\u6240\u6709\u7684\u5b50\u516c\u53f8\u6216\u8005\u6848\u53f7\u7684\u9700\u6c42\uff0c\u8bf7\u4f60\u5355\u72ec\u6253\u5370\u3002", ""], "task_id": "91dc-7e0577038d1d", "run_time": 1729349145}
{"in": "def filter_sub_company(sub_company_list, filter_dict):\n    \"\"\"\n    \u8fc7\u6ee4\u5b50\u516c\u53f8\u4fe1\u606f\n    :param sub_company_list:  /get_sub_company_info_list \u8fd4\u56de\u7684\u7ed3\u679c\n    :param filter_dict: dict \u5305\u542b\u8fc7\u6ee4\u53c2\u6570\u7684\u5b57\u5178\n        - \u6700\u5c0f\u6295\u8d44\u91d1\u989d: str \u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\uff08\u4f8b\u5982 \"1\u4ebf\", \"500\u4e07\"\uff09\u9ed8\u8ba4\u4e3a -1\n        - \u6700\u5927\u6295\u8d44\u91d1\u989d: str \u6700\u5927\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\uff08\u4f8b\u5982 \"1\u4ebf\", \"500\u4e07\"\uff09\u9ed8\u8ba4\u4e3ainf\n        - \u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b: str|int \u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\uff0c\u652f\u6301 0-100 \u7684\u767e\u5206\u5236\uff0c\u9ed8\u8ba4\u4e3a0\n        - \u6700\u5927\u6301\u80a1\u6bd4\u4f8b: str|int \u6700\u5927\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\uff0c\u652f\u6301 0-100 \u7684\u767e\u5206\u5236\uff0c\u9ed8\u8ba4\u4e3a100\n        \u6ce8\u610f\uff1a\u5b57\u6bb5\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5b58\u5728\uff0c\u4f8b\u5982\u7b5b\u9009\u5168\u8d44\u5b50\u516c\u53f8\u53ea\u9700\u8981:{'\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b':100}\uff0c\u6ca1\u6709\u5176\u4ed6\u5b57\u6bb5\u3002\n            \u7279\u522b\u7684\uff0c\u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\u4e3a\u5927\u4e8e\uff0c\u5176\u4f59\u90fd\u5305\u542b\u7b49\u4e8e\uff0c\u4f8b\u5982\uff1a{'\u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d':0} \u4f1a\u7b5b\u9009\u5927\u4e8e0\u7684\n    :return: list[dict] \u5305\u542b\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u516c\u53f8\u4fe1\u606f\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5b50\u516c\u53f8\u4fe1\u606f\u4ee5\u5b57\u5178\u5f62\u5f0f\u8868\u793a\n    \"\"\"\n    if not set(filter_dict.keys()) < {\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\", \"\u6700\u5927\u6295\u8d44\u91d1\u989d\", \"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\", \"\u6700\u5927\u6301\u80a1\u6bd4\u4f8b\"}:\n        print(\n            \"Traceback:\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u6587\u6863\uff0c\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0d\u652f\u6301,\u4f60\u53ef\u4ee5\u8fc7\u6ee4\u7684\u6761\u4ef6key\u4e3a:'\u6700\u5c0f\u6295\u8d44\u91d1\u989d','\u6700\u5927\u6295\u8d44\u91d1\u989d','\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b','\u6700\u5927\u6301\u80a1\u6bd4\u4f8b' \u8bf7\u9605\u8bfb\u6587\u6863\u540e\u91cd\u65b0\u8c03\u7528\u6216\u81ea\u5df1\u5b9e\u73b0\u7b5b\u9009\"\n        )\n        return []\n    try:\n        if set(filter_dict.keys()) == {\"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\"} and int(filter_dict[\"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\"]) == 0:\n            return sub_company_list\n        amount_min = filter_dict.get(\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\", -1)\n        amount_max = filter_dict.get(\"\u6700\u5927\u6295\u8d44\u91d1\u989d\", float(\"inf\"))\n        holding_ratio_min = filter_dict.get(\"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\", 0)\n        holding_ratio_max = filter_dict.get(\"\u6700\u5927\u6301\u80a1\u6bd4\u4f8b\", 100)\n        amount_min = map_str_to_num(amount_min)\n        amount_max = map_str_to_num(amount_max)\n        holding_ratio_min = map_str_to_num(holding_ratio_min)\n        holding_ratio_max = map_str_to_num(holding_ratio_max)\n        filter_list = []\n        for i in sub_company_list:\n            raw_info = deepcopy(i)\n            i[\"\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\"] = map_str_to_num(i[\"\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\"])\n            i[\"\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\"] = int(float(str(i[\"\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\"]).rstrip(\"%\")))\n            if (\n                amount_min < i[\"\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\"] <= amount_max\n                and holding_ratio_min <= i[\"\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\"] <= holding_ratio_max\n            ):\n                filter_list.append(raw_info)\n        print(\"\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u4e3a:\", filter_list)\n        return filter_list\n    except KeyError as e:\n        print(f\"\"\"Traceback:\u4f60\u5728\u4e4b\u524d\u6ca1\u6709\u83b7\u53d6{e}\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u5148\u83b7\u53d6\u6b64\u5b57\u6bb5\u518d\u6765\u8fc7\u6ee4\"\"\")\n        return []\n    except Exception as e:\n        print(f\"\"\"\nTraceback:\n{e}\n\u4f60\u7684\u53c2\u6570\u9519\u8bef\u6216\u8005\u662f\u67e5\u8be2\u7ed3\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u6392\u67e5\uff1a\n\u5224\u65ad\u8f93\u5165\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\n  - sub_company_list: \u4f60\u4e4b\u524d\u83b7\u53d6\u7684\u5b50\u516c\u53f8\u4fe1\u606f\u7684\u5217\u8868\uff0c\u5fc5\u987b\u5305\u542b\u7b5b\u9009\u5b57\u6bb5\uff0c\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b57\u6bb5\u540e\u518d\u6765\u8fc7\u6ee4\n  - filter_dict: \u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u4e0b\u6240\u793a\uff1a\uff1a{{\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\":\"str\", \"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\":\"str\"}} \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\uff0c\u6216\u8005\u5c06\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\u586b\u7a7a\u3002\n\u4f60\u5f53\u524d\u7684\u53c2\u6570\u4e3a\uff1a\nsub_company_list: {sub_company_list[:3]} # \u53ea\u663e\u793a\u524d\u4e09\u6761    \nfilter_dict: {filter_dict} \n\u8bf7\u5206\u6790\u539f\u56e0\uff0c\u5982\u679c\u662f sub_company_list \u53c2\u6570\u9519\u8bef\uff0c\u4f60\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u7f16\u7801\u4e2d\u8c03\u7528 call_api \u91cd\u65b0\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u4f20\u5165 filter_sub_company \u51fd\u6570\uff0c\u5199\u5728\u4e00\u4e2a Python \u811a\u672c\u4e2d    \n\"\"\")\n\n        return []", "out": [], "task_id": "91dc-7e0577038d1d", "run_time": 1729349147}
{"in": "\n# \u4f5c\u7528\uff1a\u627e\u51fa\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u5e76\u8f93\u51fa\nfrom api import call_api\n\n# \u4f7f\u7528 /rank \u63a5\u53e3\u5bf9\u6b65\u9aa4\u4e8c\u5f97\u5230\u7684\u5b50\u516c\u53f8\u5217\u8868\u8fdb\u884c\u6392\u5e8f\nroute = '/rank'\nparam = {\n    \"data_list\": sub_company_info_list_result,\n    \"key\": '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d',\n    \"is_desc\": True  # \u964d\u5e8f\u6392\u5e8f\n}\nrequirement = \"\u6309\u7167\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\u964d\u5e8f\u6392\u5e8f\u5b50\u516c\u53f8\u5217\u8868\"\nsorted_sub_company_list = call_api(route, param, requirement)\n\n# \u53d6\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\nhighest_investment_sub_company = sorted_sub_company_list[0]\n\n# \u6253\u5370\u7ed3\u679c\nprint(\"\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u4fe1\u606f\uff1a\")\nprint(highest_investment_sub_company)\n", "out": ["\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u4fe1\u606f\uff1a", "{'\u516c\u53f8\u540d\u79f0': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '8.54\u4ebf', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}", ""], "task_id": "91dc-7e0577038d1d", "run_time": 1729349154}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\nfrom api import call_api\n\nroute = '/get_legal_document_list'\nquery_conds = {'\u5173\u8054\u516c\u53f8': highest_investment_sub_company['\u516c\u53f8\u540d\u79f0']}\nneed_fields = ['\u6848\u53f7', '\u6848\u7531', '\u6d89\u6848\u91d1\u989d']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\"\nlawsuit_info_list_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, 'need_fields': ['\u6848\u53f7', '\u6848\u7531', '\u6d89\u6848\u91d1\u989d', '\u5173\u8054\u516c\u53f8']} \u67e5\u8be2\u7ed3\u679c\u4e3a:[{'\u6848\u53f7': '(2019)\u6caa0115\u6c11\u521d61975\u53f7', '\u6848\u7531': '\u670d\u52a1\u5408\u540c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '1254802.58', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, {'\u6848\u53f7': '(2019)\u6caa0115\u6c11\u521d91149\u53f7', '\u6848\u7531': '\u8ffd\u7d22\u52b3\u52a8\u62a5\u916c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '0', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, {'\u6848\u53f7': '(2020)\u6caa0115\u6c11\u521d3857\u53f7', '\u6848\u7531': '\u6280\u672f\u59d4\u6258\u5f00\u53d1\u5408\u540c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '21849', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}]", ""], "task_id": "91dc-7e0577038d1d", "run_time": 1729349164}
{"in": "from api import call_api\nimport re,json\nfrom math import inf\nfrom copy import deepcopy\nimport jieba.analyse\nimport contextlib\nimport io\njieba.analyse.textrank(\"111\")\n", "out": ["Building prefix dict from the default dictionary ...", "", "Loading model from cache /var/folders/87/sm46bt2s7hqbsj34djxvt2x40000gn/T/jieba.cache", "", "Loading model cost 0.342 seconds.", "", "Prefix dict has been built successfully.", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349317}
{"in": "def get_court_code_by_case_number(param):\n    \"\"\"\n    \u6839\u636e\u6848\u53f7\u67e5\u8be2\u6cd5\u9662\u4fe1\u606f\uff1a\"\u6cd5\u9662\u540d\u79f0\", \"\u884c\u653f\u7ea7\u522b\", \"\u6cd5\u9662\u7ea7\u522b\", \"\u6cd5\u9662\u4ee3\u5b57\", \"\u533a\u5212\u4ee3\u7801\",\"\u7ea7\u522b\"\uff0c\u4e0d\u53ef\u4ee5\u83b7\u53d6\u6cd5\u9662\u5730\u70b9\uff0c\n    \u5176\u4e2d\u6848\u53f7\u683c\u5f0f\u4e3a\uff1a(+\u6536\u6848\u5e74\u5ea6+)+\u6cd5\u9662\u4ee3\u5b57+\u7c7b\u578b\u4ee3\u5b57+\u6848\u4ef6\u7f16\u53f7+\u53f7\n    :param param: {'query_conds': {'\u6848\u53f7': 'str'}, \"need_fields\": [\"\u6cd5\u9662\u540d\u79f0\", \"\u884c\u653f\u7ea7\u522b\", \"\u6cd5\u9662\u7ea7\u522b\", \"\u6cd5\u9662\u4ee3\u5b57\", \"\u533a\u5212\u4ee3\u7801\",\"\u7ea7\u522b\"]}\n    :return:\n    \"\"\"\n    dic = {\"\u6cd5\u9662\u540d\u79f0\": \"\", \"\u884c\u653f\u7ea7\u522b\": \"\", \"\u6cd5\u9662\u7ea7\u522b\": \"\", \"\u6cd5\u9662\u4ee3\u5b57\": \"\", \"\u533a\u5212\u4ee3\u7801\": \"\", \"\u7ea7\u522b\": \"\"}\n    try:\n        case_number = param[\"query_conds\"][\"\u6848\u53f7\"]\n        match1 = re.search(r\"[(\uff08](?P<year>\\d+)[)\uff09](?P<area_code>\\D)\", case_number)\n        if match1:\n            area_code = match1.group(\"area_code\")\n            match2 = re.search(rf\"{re.escape(area_code)}(?P<court_code>\\d*)\", case_number)\n            if match2:\n                court_code = match2.group(\"court_code\")\n            else:\n                court_code = \"\"\n            info1 = call_api(\n                \"/get_court_code\",\n                {\"query_conds\": {\"\u6cd5\u9662\u4ee3\u5b57\": area_code + court_code}, \"need_fields\": []},\n                print_str=False,\n            )\n            if info1:\n                print(\"\u4e0e\u6b64\u6848\u53f7\u76f8\u5173\u7684\u6cd5\u9662\u4fe1\u606f\u67e5\u8be2\u7ed3\u679c\u4e3a:\", info1)\n                return info1\n            else:\n                return dic\n        else:\n            print(\"Traceback:\u6848\u53f7\u4e0d\u6807\u51c6\")\n            return dic\n    except:\n        print(\n            'Traceback:\u9519\u8bef\u53c2\u6570\u6216\u8005\u662f\u6848\u53f7\u9519\u8bef \u9700\u8981\u7684\u53c2\u6570\u683c\u5f0f\u4e3a\uff1a{\"query_conds\": {\"\u6848\u53f7\": str}, \"need_fields\": []}\uff0c\u4f60\u7684\u53c2\u6570\u4e3a\uff1a',\n            param,\n            \"\u8bf7\u786e\u4fdd\u53c2\u6570\u6b63\u786e\u6216\u5408\u7406\u731c\u6d4b\u6848\u53f7\",\n        )\n        try:\n            dic[\"\u6cd5\u9662\u4ee3\u5b57\"] = area_code + court_code\n            return dic\n        except:\n            return dic", "out": [], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349317}
{"in": "def sort_court_level(case_num_list, level_type=\"\u6cd5\u9662\u7ea7\u522b\"):\n    \"\"\"\n    :param case_num_list: list[dict] or list \u6848\u53f7\u5217\u8868\u6216\u8005 [{\"\u6848\u53f7\":str}],\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u63a5\u53e3\u7ed3\u679c\n    :param level_type: \u6cd5\u9662\u7ea7\u522b \u6216\u8005 \u884c\u653f\u7ea7\u522b\n    :return:List[Dict['\u6848\u53f7','\u6cd5\u9662\u540d\u79f0']] \u6392\u5e8f\u540e\u7684\u7ed3\u679c\n    \"\"\"\n    if isinstance(case_num_list[0], dict) and \"\u6848\u53f7\" in case_num_list[0]:\n        case_num_list = [i[\"\u6848\u53f7\"] for i in case_num_list]\n    court_list = []\n    for i in case_num_list:\n        with contextlib.redirect_stdout(io.StringIO()):\n            data = get_court_code_by_case_number({\"query_conds\": {\"\u6848\u53f7\": i}, \"need_fields\": []})\n        data = {\"\u6848\u53f7\": i, \"\u6cd5\u9662\u540d\u79f0\": data[\"\u6cd5\u9662\u540d\u79f0\"], level_type: data[level_type]}\n        court_list.append(data)\n    if level_type == \"\u6cd5\u9662\u7ea7\u522b\":\n        court_level_dic = {\"\u57fa\u5c42\u6cd5\u9662\": 1, \"\u4e2d\u7ea7\u6cd5\u9662\": 2, \"\u9ad8\u7ea7\u6cd5\u9662\": 3}\n    else:\n        court_level_dic = {\"\u533a\u53bf\u7ea7\": 1, \"\u5e02\u7ea7\": 2, \"\u7701\u7ea7\": 3}\n    court_list = [i for i in court_list if i[level_type]]\n    court_list = sorted(court_list, key=lambda x: court_level_dic.get(x[level_type], 4), reverse=True)\n    print(\"\u6392\u5e8f\u7ed3\u679c\u4e3a:\", court_list)\n    return court_list", "out": [], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349317}
{"in": "def map_str_to_num(str_num):\n    if not isinstance(str_num, str):\n        return str_num\n    try:\n        str_num = str_num.replace(\"\u5343\", \"*1e3\")\n        str_num = str_num.replace(\"\u4e07\", \"*1e4\")\n        str_num = str_num.replace(\"\u4ebf\", \"*1e8\")\n        return eval(str_num)\n    except:\n        pass\n    return -100\n", "out": [], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349317}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\nfrom api import call_api\n\nroute = '/get_company_info'\nquery_conds = {'\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}\nneed_fields = ['\u516c\u53f8\u540d\u79f0']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\"\n\ncompany_full_name_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u822a\u5929\u673a\u7535\u516c\u53f8\u7684\u5168\u79f0\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}, 'need_fields': ['\u516c\u53f8\u540d\u79f0', '\u516c\u53f8\u7b80\u79f0']} \u67e5\u8be2\u7ed3\u679c\u4e3a:{'\u516c\u53f8\u540d\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8', '\u516c\u53f8\u7b80\u79f0': '\u822a\u5929\u673a\u7535'}", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349321}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\nfrom api import call_api\n\nroute = '/get_sub_company_info_list'\nquery_conds = {'\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': company_full_name_result['\u516c\u53f8\u540d\u79f0']}\nneed_fields = ['\u516c\u53f8\u540d\u79f0', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\"\n\nsub_company_info_list_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6295\u8d44\u7684\u6240\u6709\u5b50\u516c\u53f8\u4fe1\u606f\u5217\u8868\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, 'need_fields': ['\u516c\u53f8\u540d\u79f0', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0']} \u67e5\u8be2\u7ed3\u679c\u4e3a:[{'\u516c\u53f8\u540d\u79f0': '\u7518\u8083\u795e\u821f\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '8800.00\u4e07', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, {'\u516c\u53f8\u540d\u79f0': '\u7518\u8083\u5f20\u6396\u795e\u821f\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '1.19\u4ebf', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}, {'\u516c\u53f8\u540d\u79f0': '\u5609\u5cea\u5173\u6052\u80fd\u5149\u4f0f\u7535\u529b\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '3400.00\u4e07', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}] # \u53ea\u663e\u793a\u524d\u4e09\u6761 \u4e00\u517118\u6761\uff0c\u5982\u679c\u9898\u76ee\u67e5\u770b\u6240\u6709\u7684\u5b50\u516c\u53f8\u6216\u8005\u6848\u53f7\u7684\u9700\u6c42\uff0c\u8bf7\u4f60\u5355\u72ec\u6253\u5370\u3002", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349328}
{"in": "def filter_sub_company(sub_company_list, filter_dict):\n    \"\"\"\n    \u8fc7\u6ee4\u5b50\u516c\u53f8\u4fe1\u606f\n    :param sub_company_list:  /get_sub_company_info_list \u8fd4\u56de\u7684\u7ed3\u679c\n    :param filter_dict: dict \u5305\u542b\u8fc7\u6ee4\u53c2\u6570\u7684\u5b57\u5178\n        - \u6700\u5c0f\u6295\u8d44\u91d1\u989d: str \u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\uff08\u4f8b\u5982 \"1\u4ebf\", \"500\u4e07\"\uff09\u9ed8\u8ba4\u4e3a -1\n        - \u6700\u5927\u6295\u8d44\u91d1\u989d: str \u6700\u5927\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\uff08\u4f8b\u5982 \"1\u4ebf\", \"500\u4e07\"\uff09\u9ed8\u8ba4\u4e3ainf\n        - \u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b: str|int \u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\uff0c\u652f\u6301 0-100 \u7684\u767e\u5206\u5236\uff0c\u9ed8\u8ba4\u4e3a0\n        - \u6700\u5927\u6301\u80a1\u6bd4\u4f8b: str|int \u6700\u5927\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\uff0c\u652f\u6301 0-100 \u7684\u767e\u5206\u5236\uff0c\u9ed8\u8ba4\u4e3a100\n        \u6ce8\u610f\uff1a\u5b57\u6bb5\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5b58\u5728\uff0c\u4f8b\u5982\u7b5b\u9009\u5168\u8d44\u5b50\u516c\u53f8\u53ea\u9700\u8981:{'\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b':100}\uff0c\u6ca1\u6709\u5176\u4ed6\u5b57\u6bb5\u3002\n            \u7279\u522b\u7684\uff0c\u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\u4e3a\u5927\u4e8e\uff0c\u5176\u4f59\u90fd\u5305\u542b\u7b49\u4e8e\uff0c\u4f8b\u5982\uff1a{'\u6700\u5c0f\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d':0} \u4f1a\u7b5b\u9009\u5927\u4e8e0\u7684\n    :return: list[dict] \u5305\u542b\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u516c\u53f8\u4fe1\u606f\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5b50\u516c\u53f8\u4fe1\u606f\u4ee5\u5b57\u5178\u5f62\u5f0f\u8868\u793a\n    \"\"\"\n    if not set(filter_dict.keys()) < {\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\", \"\u6700\u5927\u6295\u8d44\u91d1\u989d\", \"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\", \"\u6700\u5927\u6301\u80a1\u6bd4\u4f8b\"}:\n        print(\n            \"Traceback:\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u6587\u6863\uff0c\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0d\u652f\u6301,\u4f60\u53ef\u4ee5\u8fc7\u6ee4\u7684\u6761\u4ef6key\u4e3a:'\u6700\u5c0f\u6295\u8d44\u91d1\u989d','\u6700\u5927\u6295\u8d44\u91d1\u989d','\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b','\u6700\u5927\u6301\u80a1\u6bd4\u4f8b' \u8bf7\u9605\u8bfb\u6587\u6863\u540e\u91cd\u65b0\u8c03\u7528\u6216\u81ea\u5df1\u5b9e\u73b0\u7b5b\u9009\"\n        )\n        return []\n    try:\n        if set(filter_dict.keys()) == {\"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\"} and int(filter_dict[\"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\"]) == 0:\n            return sub_company_list\n        amount_min = filter_dict.get(\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\", -1)\n        amount_max = filter_dict.get(\"\u6700\u5927\u6295\u8d44\u91d1\u989d\", float(\"inf\"))\n        holding_ratio_min = filter_dict.get(\"\u6700\u5c0f\u6301\u80a1\u6bd4\u4f8b\", 0)\n        holding_ratio_max = filter_dict.get(\"\u6700\u5927\u6301\u80a1\u6bd4\u4f8b\", 100)\n        amount_min = map_str_to_num(amount_min)\n        amount_max = map_str_to_num(amount_max)\n        holding_ratio_min = map_str_to_num(holding_ratio_min)\n        holding_ratio_max = map_str_to_num(holding_ratio_max)\n        filter_list = []\n        for i in sub_company_list:\n            raw_info = deepcopy(i)\n            i[\"\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\"] = map_str_to_num(i[\"\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\"])\n            i[\"\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\"] = int(float(str(i[\"\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\"]).rstrip(\"%\")))\n            if (\n                amount_min < i[\"\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\"] <= amount_max\n                and holding_ratio_min <= i[\"\u4e0a\u5e02\u516c\u53f8\u53c2\u80a1\u6bd4\u4f8b\"] <= holding_ratio_max\n            ):\n                filter_list.append(raw_info)\n        print(\"\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u4e3a:\", filter_list)\n        return filter_list\n    except KeyError as e:\n        print(f\"\"\"Traceback:\u4f60\u5728\u4e4b\u524d\u6ca1\u6709\u83b7\u53d6{e}\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u5148\u83b7\u53d6\u6b64\u5b57\u6bb5\u518d\u6765\u8fc7\u6ee4\"\"\")\n        return []\n    except Exception as e:\n        print(f\"\"\"\nTraceback:\n{e}\n\u4f60\u7684\u53c2\u6570\u9519\u8bef\u6216\u8005\u662f\u67e5\u8be2\u7ed3\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u6392\u67e5\uff1a\n\u5224\u65ad\u8f93\u5165\u53c2\u6570\u662f\u5426\u6b63\u786e\uff0c\n  - sub_company_list: \u4f60\u4e4b\u524d\u83b7\u53d6\u7684\u5b50\u516c\u53f8\u4fe1\u606f\u7684\u5217\u8868\uff0c\u5fc5\u987b\u5305\u542b\u7b5b\u9009\u5b57\u6bb5\uff0c\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b57\u6bb5\u540e\u518d\u6765\u8fc7\u6ee4\n  - filter_dict: \u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u4e0b\u6240\u793a\uff1a\uff1a{{\"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\":\"str\", \"\u6700\u5c0f\u6295\u8d44\u91d1\u989d\":\"str\"}} \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\uff0c\u6216\u8005\u5c06\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\u586b\u7a7a\u3002\n\u4f60\u5f53\u524d\u7684\u53c2\u6570\u4e3a\uff1a\nsub_company_list: {sub_company_list[:3]} # \u53ea\u663e\u793a\u524d\u4e09\u6761    \nfilter_dict: {filter_dict} \n\u8bf7\u5206\u6790\u539f\u56e0\uff0c\u5982\u679c\u662f sub_company_list \u53c2\u6570\u9519\u8bef\uff0c\u4f60\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u7f16\u7801\u4e2d\u8c03\u7528 call_api \u91cd\u65b0\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u4f20\u5165 filter_sub_company \u51fd\u6570\uff0c\u5199\u5728\u4e00\u4e2a Python \u811a\u672c\u4e2d    \n\"\"\")\n\n        return []", "out": [], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349330}
{"in": "\n# \u4f5c\u7528\uff1a\u627e\u51fa\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u5e76\u8f93\u51fa\nfrom api import call_api\n\n# \u4f7f\u7528 /rank \u63a5\u53e3\u5bf9\u6b65\u9aa4\u4e8c\u5f97\u5230\u7684\u5b50\u516c\u53f8\u5217\u8868\u8fdb\u884c\u6392\u5e8f\nroute = '/rank'\nparam = {\n    \"data_list\": sub_company_info_list_result,\n    \"key\": '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d',\n    \"is_desc\": True  # \u964d\u5e8f\u6392\u5e8f\n}\nrequirement = \"\u6309\u7167\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d\u6392\u5e8f\u5b50\u516c\u53f8\u4fe1\u606f\"\n\n# \u6392\u5e8f\u5e76\u83b7\u53d6\u7ed3\u679c\nsorted_sub_company_info = call_api(route, param, requirement)\n\n# \u53d6\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\uff09\nhighest_investment_sub_company = sorted_sub_company_info[0]\n\n# \u6253\u5370\u7ed3\u679c\nprint(\"\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u4fe1\u606f\uff1a\")\nprint(highest_investment_sub_company)\n", "out": ["\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u4fe1\u606f\uff1a", "{'\u516c\u53f8\u540d\u79f0': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8', '\u4e0a\u5e02\u516c\u53f8\u6295\u8d44\u91d1\u989d': '8.54\u4ebf', '\u5173\u8054\u4e0a\u5e02\u516c\u53f8\u5168\u79f0': '\u4e0a\u6d77\u822a\u5929\u6c7d\u8f66\u673a\u7535\u80a1\u4efd\u6709\u9650\u516c\u53f8'}", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349337}
{"in": "\n# \u4f5c\u7528\uff1a\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\nfrom api import call_api\n\nroute = '/get_legal_document_list'\nquery_conds = {'\u5173\u8054\u516c\u53f8': highest_investment_sub_company['\u516c\u53f8\u540d\u79f0']}\nneed_fields = ['\u6848\u53f7', '\u6848\u7531', '\u6d89\u6848\u91d1\u989d']\nparam = {'query_conds': query_conds, 'need_fields': need_fields}\nrequirement = \"\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\"\n\nlawsuit_info_list_result = call_api(route, param, requirement)\n", "out": ["\u83b7\u53d6\u6295\u8d44\u91d1\u989d\u6700\u9ad8\u7684\u5b50\u516c\u53f8\u7684\u6d89\u8bc9\u6848\u4ef6\u4fe1\u606f\u5217\u8868\u53c2\u6570\u4e3a\uff1a{'query_conds': {'\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, 'need_fields': ['\u6848\u53f7', '\u6848\u7531', '\u6d89\u6848\u91d1\u989d', '\u5173\u8054\u516c\u53f8']} \u67e5\u8be2\u7ed3\u679c\u4e3a:[{'\u6848\u53f7': '(2019)\u6caa0115\u6c11\u521d61975\u53f7', '\u6848\u7531': '\u670d\u52a1\u5408\u540c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '1254802.58', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, {'\u6848\u53f7': '(2019)\u6caa0115\u6c11\u521d91149\u53f7', '\u6848\u7531': '\u8ffd\u7d22\u52b3\u52a8\u62a5\u916c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '0', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}, {'\u6848\u53f7': '(2020)\u6caa0115\u6c11\u521d3857\u53f7', '\u6848\u7531': '\u6280\u672f\u59d4\u6258\u5f00\u53d1\u5408\u540c\u7ea0\u7eb7', '\u6d89\u6848\u91d1\u989d': '21849', '\u5173\u8054\u516c\u53f8': '\u4e0a\u6d77\u7231\u65af\u8fbe\u514b\u6c7d\u8f66\u7a7a\u8c03\u7cfb\u7edf\u6709\u9650\u516c\u53f8'}]", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349347}
{"in": "def filter_legal_docs(legal_documents_result, filter_dict):\n    \"\"\"\n    \u8fc7\u6ee4\u6cd5\u5f8b\u6587\u6863\u4fe1\u606f\n    \u6839\u636e\u6307\u5b9a\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u4ece\u6cd5\u5f8b\u6587\u6863\u5217\u8868\u4e2d\u8fc7\u6ee4\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\u3002\u6848\u53f7\u683c\u5f0f\u4e3a\uff1a(+\u6536\u6848\u5e74\u5ea6+)+\u6cd5\u9662\u4ee3\u5b57+\u7c7b\u578b\u4ee3\u5b57+\u6848\u4ef6\u7f16\u53f7+\u53f7\u3002\n    \u53c2\u6570:\n    legal_documents_result (list[dict]): \u901a\u8fc7 get_legal_document_list \u63a5\u53e3\u83b7\u5f97\u7684\u6cd5\u5f8b\u6587\u6863\u5217\u8868\u3002\n    param filter_dict (dict): \u5305\u542b\u8fc7\u6ee4\u6761\u4ef6\u7684\u5b57\u5178\n        - \u6848\u7531 (str): \u6848\u4ef6\u7684\u6848\u7531\uff0c\u652f\u6301\u6a21\u7cca\u5339\u914d\uff0c\u4f46\u662f\u5fc5\u987b\u662f\u5173\u952e\u8bcd\u4f8b\u5982:\u52b3\u52a1\u7ea0\u7eb7,\u503a\u6743\u7ea0\u7eb7\uff0c\u4fb5\u5bb3\u5546\u6807\u6743\u7ea0\u7eb7\u3002\n        - \u5e74\u4efd (str): \u6848\u4ef6\u7684\u5e74\u4efd\uff0c\u4f8b\u5982 '2019'\u3002\n        - \u5e74\u4efd\u7c7b\u578b (str): \u5e74\u4efd\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f '\u7acb\u6848\u65e5\u671f'\u3001'\u8d77\u8bc9\u65e5\u671f' \u6216 '\u5ba1\u7406\u65e5\u671f'\u3002\n        - \u5ba1\u7406\u7701\u4efd: (str) \u6848\u4ef6\u5ba1\u7406\u7684\u7701\u4efd\uff0c\u6ce8\u610f\u662f\u7b80\u79f0\uff0c\u4f8b\u5982 \u5b89\u5fbd\u7701->\u7696 \u56db\u5ddd->\u5ddd\n        - \u6848\u4ef6\u7c7b\u578b (str): \u6848\u4ef6\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f ['\u6c11', '\u6c11\u521d', '\u6c11\u7ec8', '\u6267','\u6c11\u7533'] \u4e4b\u4e00\u3002\n            - '\u6c11': \u6c11\u4e8b\u8bc9\u8bbc\n            - '\u6c11\u521d': \u6c11\u4e8b\u8bc9\u8bbc\u521d\u5ba1\n            - '\u6c11\u7ec8': \u6c11\u4e8b\u8bc9\u8bbc\u7ec8\u5ba1\n            - '\u6267': \u6267\u884c\u6848\u4ef6\n        - \u539f\u544a (str): \u6848\u4ef6\u7684\u539f\u544a\u3002\n        - \u88ab\u544a (str): \u6848\u4ef6\u7684\u88ab\u544a\u3002\n        - \u6700\u5c0f\u6d89\u6848\u91d1\u989d (str): \u6848\u4ef6\u7684\u6700\u5c0f\u6d89\u6848\u91d1\u989d\uff0c\u652f\u6301 1\u4ebf\uff0c10\u4e07\u8fd9\u79cd\u63cf\u8ff0,\u6d89\u6848\u91d1\u989d\u4e0d\u4e3a0\u7684\u586b\u201c0\u201d\n        - \u6700\u5927\u6d89\u6848\u91d1\u989d (str): \u6848\u4ef6\u7684\u6700\u5927\u6d89\u6848\u91d1\u989d\uff0c\u652f\u6301 1\u4ebf\uff0c10\u4e07\u8fd9\u79cd\u63cf\u8ff0\n        - \u6cd5\u9662\u4ee3\u5b57(str): \u5ba1\u7406\u6cd5\u9662\u7684\u4ee3\u5b57\n    \u6ce8\u610f\uff1a\u5b57\u6bb5\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5b58\u5728\uff0c\u4f8b\u5982\u7b5b\u90092019\u5e74\u7684\u6267\u884c\u6848\u4ef6\u53ea\u9700\u8981{'\u5e74\u4efd':'2019','\u5e74\u4efd\u7c7b\u578b':'\u7acb\u6848\u65e5\u671f','\u6848\u4ef6\u7c7b\u578b':'\u6267'}\u3002\n    \u8fd4\u56de:\n        list[dict]: \u5305\u542b\u7b26\u5408\u6761\u4ef6\u7684\u6cd5\u5f8b\u6587\u6863\u4fe1\u606f\u7684\u5217\u8868\u3002\n    \"\"\"\n    if not set(filter_dict.keys()) < {\n        \"\u6848\u7531\",\n        \"\u5e74\u4efd\",\n        \"\u5e74\u4efd\u7c7b\u578b\",\n        \"\u6848\u4ef6\u7c7b\u578b\",\n        \"\u539f\u544a\",\n        \"\u88ab\u544a\",\n        \"\u6700\u5c0f\u6d89\u6848\u91d1\u989d\",\n        \"\u6700\u5927\u6d89\u6848\u91d1\u989d\",\n        \"\u5ba1\u7406\u7701\u4efd\",\n    }:\n        print(\n            \"Traceback:\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u6587\u6863\uff0c\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0d\u652f\u6301,\u4f60\u53ef\u4ee5\u8fc7\u6ee4\u7684\u6761\u4ef6key\u4e3a:'\u6848\u7531','\u5e74\u4efd','\u5e74\u4efd\u7c7b\u578b','\u6848\u4ef6\u7c7b\u578b','\u539f\u544a','\u88ab\u544a','\u6700\u5c0f\u6d89\u6848\u91d1\u989d','\u6700\u5927\u6d89\u6848\u91d1\u989d','\u5ba1\u7406\u7701\u4efd' \u8bf7\u9605\u8bfb\u6587\u6863\u540e\u91cd\u65b0\u8c03\u7528\u6216\u81ea\u5df1\u5b9e\u73b0\u7b5b\u9009\"\n        )\n        return []\n    try:\n        if isinstance(legal_documents_result, dict):\n            legal_documents_result = [legal_documents_result]\n        if \"\u6848\u4ef6\u7c7b\u578b\" in filter_dict and filter_dict[\"\u6848\u4ef6\u7c7b\u578b\"]:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict[\"\u6848\u4ef6\u7c7b\u578b\"] in i[\"\u6848\u53f7\"]]\n        if \"\u539f\u544a\" in filter_dict and filter_dict[\"\u539f\u544a\"]:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict[\"\u539f\u544a\"] in i[\"\u539f\u544a\"]]\n        if \"\u88ab\u544a\" in filter_dict and filter_dict[\"\u88ab\u544a\"]:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict[\"\u88ab\u544a\"] in i[\"\u88ab\u544a\"]]\n        if \"\u5ba1\u7406\u7701\u4efd\" in filter_dict and filter_dict[\"\u5ba1\u7406\u7701\u4efd\"]:\n            legal_documents_result = [i for i in legal_documents_result if filter_dict[\"\u5ba1\u7406\u7701\u4efd\"] in i[\"\u6848\u53f7\"]]\n        if \"\u6848\u7531\" in filter_dict and filter_dict[\"\u6848\u7531\"]:\n            keywords_tfidf = jieba.analyse.extract_tags(filter_dict[\"\u6848\u7531\"], topK=5, withWeight=False)\n            legal_documents_result_reasons = []\n            for i in legal_documents_result:\n                if keywords_tfidf[0] in i[\"\u6848\u7531\"]:\n                    legal_documents_result_reasons.append(i)\n        else:\n            legal_documents_result_reasons = legal_documents_result\n        if \"\u5e74\u4efd\" in filter_dict and filter_dict[\"\u5e74\u4efd\"]:\n            filter_legal_documents_result = []\n            for i in legal_documents_result_reasons:\n                if \"\u5e74\u4efd\u7c7b\u578b\" in filter_dict and filter_dict[\"\u5e74\u4efd\u7c7b\u578b\"] in [\"\u5ba1\u7406\u65e5\u671f\"]:\n                    if i[\"\u65e5\u671f\"].startswith(filter_dict[\"\u5e74\u4efd\"]):\n                        filter_legal_documents_result.append(i)\n                else:\n                    if f\"({filter_dict['\u5e74\u4efd']})\" in i[\"\u6848\u53f7\"] or f\"\uff08{filter_dict['\u5e74\u4efd']}\uff09\" in i[\"\u6848\u53f7\"]:\n                        filter_legal_documents_result.append(i)\n        else:\n            filter_legal_documents_result = legal_documents_result_reasons\n        if \"\u6700\u5c0f\u6d89\u6848\u91d1\u989d\" in filter_dict:\n            min_case = map_str_to_num(filter_dict.get(\"\u6700\u5c0f\u6d89\u6848\u91d1\u989d\"))\n            filter_legal_documents_result = [\n                i for i in filter_legal_documents_result if map_str_to_num(i[\"\u6d89\u6848\u91d1\u989d\"]) > min_case\n            ]\n        if \"\u6700\u5927\u6d89\u6848\u91d1\u989d\" in filter_dict:\n            max_case = map_str_to_num(filter_dict.get(\"\u6700\u5927\u6d89\u6848\u91d1\u989d\"))\n            filter_legal_documents_result = [\n                i for i in filter_legal_documents_result if map_str_to_num(i[\"\u6d89\u6848\u91d1\u989d\"]) < max_case\n            ]\n        if \"\u6cd5\u9662\u4ee3\u5b57\" in filter_dict:\n            fy_code = filter_dict[\"\u6cd5\u9662\u4ee3\u5b57\"]\n            filter_legal_documents_result = [\n                i for i in filter_legal_documents_result if re.search(fy_code + \"(?!\\d)\", i[\"\u6848\u53f7\"])\n            ]\n        print(f\"\u8fc7\u6ee4\u540e\u7684\u7ed3\u679c\u4e3a:{filter_legal_documents_result}\")\n        return filter_legal_documents_result\n    except KeyError as e:\n        print(f\"\"\"Traceback:\u4f60\u5728\u4e4b\u524d\u6ca1\u6709\u83b7\u53d6{e}\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u5148\u83b7\u53d6\u6b64\u5b57\u6bb5\u518d\u6765\u8fc7\u6ee4\"\"\")\n        return []\n    except Exception as e:\n        print(f\"\"\"\nTraceback:\n{e}\n\u4f60\u7684\u53c2\u6570\u9519\u8bef\u6216\u8005\u662f\u4e4b\u524d\u7684\u6b65\u9aa4\u6709\u95ee\u9898\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u6392\u67e5\uff1a\n\u9700\u8981\u7684\u53c2\u6570\u4e3a\uff1a\nlegal_documents_result: \u901a\u8fc7 get_legal_document_list \u63a5\u53e3\u83b7\u5f97\u7684\u6570\u636e\uff0c\u9700\u8981\u5728need_fields\u52a0\u5165\u76f8\u5173\u5b57\u6bb5\uff0c\u5982\uff1a\u6848\u7531\uff0c\u65e5\u671f\uff0c\u6848\u53f7\uff0c\u539f\u544a\uff0c\u88ab\u544a\u7b49\nfilter_dict:\u4f60\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u4e0b\u6240\u793a\uff1a{{\"\u6848\u7531\":\"str\",'\u5e74\u4efd':'2019','\u5e74\u4efd\u7c7b\u578b':'\u7acb\u6848\u65e5\u671f/\u8d77\u8bc9\u65e5\u671f/\u5ba1\u7406\u65e5\u671f','\u539f\u544a':'xxx','\u88ab\u544a':'xxx'}}\" \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\uff0c\u6216\u8005\u5c06\u4e0d\u5fc5\u8981\u7684\u5b57\u6bb5\u586b\u7a7a\u3002\n\u4f60\u5f53\u524d\u7684\u53c2\u6570\u4e3a\uff1a\nlegal_documents_result:{legal_documents_result[:3]} # \u53ea\u663e\u793a\u524d\u4e09\u6761\nfilter_dict:{filter_dict}\n\u8bf7\u5206\u6790\u539f\u56e0\uff0c\u5982\u679c\u662f legal_documents_result \u53c2\u6570\u9519\u8bef\uff0c\u4f60\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u7f16\u7801\u4e2d\u8c03\u7528 call_api \u91cd\u65b0\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u4f20\u5165 filter_legal_docs \u51fd\u6570\uff0c\u5199\u5728\u4e00\u4e2apython\u811a\u672c\u4e2d\n\"\"\")\n        return []", "out": ["<>:84: SyntaxWarning: invalid escape sequence '\\d'", "<>:84: SyntaxWarning: invalid escape sequence '\\d'", "/var/folders/87/sm46bt2s7hqbsj34djxvt2x40000gn/T/ipykernel_53292/319405135.py:84: SyntaxWarning: invalid escape sequence '\\d'", "  i for i in filter_legal_documents_result if re.search(fy_code + \"(?!\\d)\", i[\"\u6848\u53f7\"])", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349351}
{"in": "\n# \u4f5c\u7528\uff1a\u627e\u51fa\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\u5e76\u8f93\u51fa\nfrom api import call_api\n\n# \u4f7f\u7528 /rank \u63a5\u53e3\u5bf9\u6b65\u9aa4\u56db\u5f97\u5230\u7684\u6848\u4ef6\u5217\u8868\u8fdb\u884c\u6392\u5e8f\nroute = '/rank'\nparam = {\n    \"data_list\": lawsuit_info_list_result,\n    \"key\": '\u6d89\u6848\u91d1\u989d',\n    \"is_desc\": True  # \u964d\u5e8f\u6392\u5e8f\n}\nrequirement = \"\u6309\u7167\u6d89\u6848\u91d1\u989d\u6392\u5e8f\u6848\u4ef6\u4fe1\u606f\"\n\n# \u6392\u5e8f\u5e76\u83b7\u53d6\u7ed3\u679c\nsorted_lawsuit_info = call_api(route, param, requirement)\n\n# \u53d6\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u4ef6\uff09\nhighest_amount_lawsuit = sorted_lawsuit_info[0]\n\n# \u6253\u5370\u7ed3\u679c\nprint(\"\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\uff1a\")\nprint(highest_amount_lawsuit['\u6848\u7531'])\n", "out": ["\u6d89\u6848\u91d1\u989d\u6700\u9ad8\u7684\u6848\u7531\uff1a", "\u670d\u52a1\u5408\u540c\u7ea0\u7eb7", ""], "task_id": "8bfb-7e0577038d1d", "run_time": 1729349396}
